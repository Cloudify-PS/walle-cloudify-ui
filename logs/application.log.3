[2014-02-17 15:43:46.575] [INFO] console - STATUS: 200
[2014-02-17 15:43:46.576] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "5af49379-1c26-43f8-90e8-16d194a4c804", "nodes": [{"reachable": null, "id": "neutron_network_3df7b"}, {"reachable": null, "id": "neutron_subnet_a8a50"}]}' ]
[2014-02-17 15:43:50.557] [INFO] server - [ 'dispatching request ',
  { hostname: '15.185.216.244',
    port: '8100',
    path: '/deployments/5af49379-1c26-43f8-90e8-16d194a4c804/nodes',
    method: 'GET' } ]
[2014-02-17 15:43:51.190] [INFO] console - STATUS: 200
[2014-02-17 15:43:51.219] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "5af49379-1c26-43f8-90e8-16d194a4c804", "nodes": [{"reachable": null, "id": "neutron_network_3df7b"}, {"reachable": null, "id": "neutron_subnet_a8a50"}]}' ]
[2014-02-17 15:43:54.556] [INFO] server - [ 'dispatching request ',
  { hostname: '15.185.216.244',
    port: '8100',
    path: '/deployments/5af49379-1c26-43f8-90e8-16d194a4c804/nodes',
    method: 'GET' } ]
[2014-02-17 15:43:55.057] [INFO] console - STATUS: 200
[2014-02-17 15:43:55.058] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "5af49379-1c26-43f8-90e8-16d194a4c804", "nodes": [{"reachable": null, "id": "neutron_network_3df7b"}, {"reachable": null, "id": "neutron_subnet_a8a50"}]}' ]
[2014-02-17 15:43:58.556] [INFO] server - [ 'dispatching request ',
  { hostname: '15.185.216.244',
    port: '8100',
    path: '/deployments/5af49379-1c26-43f8-90e8-16d194a4c804/nodes',
    method: 'GET' } ]
[2014-02-17 15:43:59.086] [INFO] console - STATUS: 200
[2014-02-17 15:43:59.087] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "5af49379-1c26-43f8-90e8-16d194a4c804", "nodes": [{"reachable": null, "id": "neutron_network_3df7b"}, {"reachable": null, "id": "neutron_subnet_a8a50"}]}' ]
[2014-02-17 15:44:02.558] [INFO] server - [ 'dispatching request ',
  { hostname: '15.185.216.244',
    port: '8100',
    path: '/deployments/5af49379-1c26-43f8-90e8-16d194a4c804/nodes',
    method: 'GET' } ]
[2014-02-17 15:44:03.068] [INFO] console - STATUS: 200
[2014-02-17 15:44:03.068] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "5af49379-1c26-43f8-90e8-16d194a4c804", "nodes": [{"reachable": null, "id": "neutron_network_3df7b"}, {"reachable": null, "id": "neutron_subnet_a8a50"}]}' ]
[2014-02-17 15:44:06.556] [INFO] server - [ 'dispatching request ',
  { hostname: '15.185.216.244',
    port: '8100',
    path: '/deployments/5af49379-1c26-43f8-90e8-16d194a4c804/nodes',
    method: 'GET' } ]
[2014-02-17 15:44:07.351] [INFO] console - STATUS: 200
[2014-02-17 15:44:07.351] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "5af49379-1c26-43f8-90e8-16d194a4c804", "nodes": [{"reachable": null, "id": "neutron_network_3df7b"}, {"reachable": null, "id": "neutron_subnet_a8a50"}]}' ]
[2014-02-17 15:44:10.556] [INFO] server - [ 'dispatching request ',
  { hostname: '15.185.216.244',
    port: '8100',
    path: '/deployments/5af49379-1c26-43f8-90e8-16d194a4c804/nodes',
    method: 'GET' } ]
[2014-02-17 15:44:11.076] [INFO] console - STATUS: 200
[2014-02-17 15:44:11.081] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "5af49379-1c26-43f8-90e8-16d194a4c804", "nodes": [{"reachable": null, "id": "neutron_network_3df7b"}, {"reachable": null, "id": "neutron_subnet_a8a50"}]}' ]
[2014-02-17 15:44:14.557] [INFO] server - [ 'dispatching request ',
  { hostname: '15.185.216.244',
    port: '8100',
    path: '/deployments/5af49379-1c26-43f8-90e8-16d194a4c804/nodes',
    method: 'GET' } ]
[2014-02-17 15:44:15.523] [INFO] console - STATUS: 200
[2014-02-17 15:44:15.748] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "5af49379-1c26-43f8-90e8-16d194a4c804", "nodes": [{"reachable": null, "id": "neutron_network_3df7b"}, {"reachable": null, "id": "neutron_subnet_a8a50"}]}' ]
[2014-02-17 15:44:19.557] [INFO] server - [ 'dispatching request ',
  { hostname: '15.185.216.244',
    port: '8100',
    path: '/deployments/5af49379-1c26-43f8-90e8-16d194a4c804/nodes',
    method: 'GET' } ]
[2014-02-17 15:44:20.094] [INFO] console - STATUS: 200
[2014-02-17 15:44:20.094] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "5af49379-1c26-43f8-90e8-16d194a4c804", "nodes": [{"reachable": null, "id": "neutron_network_3df7b"}, {"reachable": null, "id": "neutron_subnet_a8a50"}]}' ]
[2014-02-17 15:44:23.557] [INFO] server - [ 'dispatching request ',
  { hostname: '15.185.216.244',
    port: '8100',
    path: '/deployments/5af49379-1c26-43f8-90e8-16d194a4c804/nodes',
    method: 'GET' } ]
[2014-02-17 15:44:24.267] [INFO] console - STATUS: 200
[2014-02-17 15:44:24.322] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "5af49379-1c26-43f8-90e8-16d194a4c804", "nodes": [{"reachable": null, "id": "neutron_network_3df7b"}, {"reachable": null, "id": "neutron_subnet_a8a50"}]}' ]
[2014-02-17 15:44:27.556] [INFO] server - [ 'dispatching request ',
  { hostname: '15.185.216.244',
    port: '8100',
    path: '/deployments/5af49379-1c26-43f8-90e8-16d194a4c804/nodes',
    method: 'GET' } ]
[2014-02-17 15:44:28.013] [INFO] console - STATUS: 200
[2014-02-17 15:44:28.021] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "5af49379-1c26-43f8-90e8-16d194a4c804", "nodes": [{"reachable": null, "id": "neutron_network_3df7b"}, {"reachable": null, "id": "neutron_subnet_a8a50"}]}' ]
[2014-02-17 15:44:31.557] [INFO] server - [ 'dispatching request ',
  { hostname: '15.185.216.244',
    port: '8100',
    path: '/deployments/5af49379-1c26-43f8-90e8-16d194a4c804/nodes',
    method: 'GET' } ]
[2014-02-17 15:44:32.069] [INFO] console - STATUS: 200
[2014-02-17 15:44:32.069] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "5af49379-1c26-43f8-90e8-16d194a4c804", "nodes": [{"reachable": null, "id": "neutron_network_3df7b"}, {"reachable": null, "id": "neutron_subnet_a8a50"}]}' ]
[2014-02-17 15:44:35.557] [INFO] server - [ 'dispatching request ',
  { hostname: '15.185.216.244',
    port: '8100',
    path: '/deployments/5af49379-1c26-43f8-90e8-16d194a4c804/nodes',
    method: 'GET' } ]
[2014-02-17 15:44:36.053] [INFO] console - STATUS: 200
[2014-02-17 15:44:36.083] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "5af49379-1c26-43f8-90e8-16d194a4c804", "nodes": [{"reachable": null, "id": "neutron_network_3df7b"}, {"reachable": null, "id": "neutron_subnet_a8a50"}]}' ]
[2014-02-17 15:44:39.556] [INFO] server - [ 'dispatching request ',
  { hostname: '15.185.216.244',
    port: '8100',
    path: '/deployments/5af49379-1c26-43f8-90e8-16d194a4c804/nodes',
    method: 'GET' } ]
[2014-02-17 15:44:40.048] [INFO] console - STATUS: 200
[2014-02-17 15:44:40.052] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "5af49379-1c26-43f8-90e8-16d194a4c804", "nodes": [{"reachable": null, "id": "neutron_network_3df7b"}, {"reachable": null, "id": "neutron_subnet_a8a50"}]}' ]
[2014-02-17 15:44:43.558] [INFO] server - [ 'dispatching request ',
  { hostname: '15.185.216.244',
    port: '8100',
    path: '/deployments/5af49379-1c26-43f8-90e8-16d194a4c804/nodes',
    method: 'GET' } ]
[2014-02-17 15:44:44.050] [INFO] console - STATUS: 200
[2014-02-17 15:44:44.055] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "5af49379-1c26-43f8-90e8-16d194a4c804", "nodes": [{"reachable": null, "id": "neutron_network_3df7b"}, {"reachable": null, "id": "neutron_subnet_a8a50"}]}' ]
[2014-02-17 15:44:47.557] [INFO] server - [ 'dispatching request ',
  { hostname: '15.185.216.244',
    port: '8100',
    path: '/deployments/5af49379-1c26-43f8-90e8-16d194a4c804/nodes',
    method: 'GET' } ]
[2014-02-17 15:44:49.536] [INFO] console - STATUS: 200
[2014-02-17 15:44:49.538] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "5af49379-1c26-43f8-90e8-16d194a4c804", "nodes": [{"reachable": null, "id": "neutron_network_3df7b"}, {"reachable": null, "id": "neutron_subnet_a8a50"}]}' ]
[2014-02-17 15:44:51.502] [INFO] server - [ 'dispatching request ',
  { hostname: '15.185.216.244',
    port: '8100',
    path: '/blueprints',
    method: 'GET' } ]
[2014-02-17 15:44:52.136] [INFO] console - STATUS: 200
[2014-02-17 15:44:56.310] [INFO] server - [ 'dispatching request ',
  { hostname: '15.185.216.244',
    port: '8100',
    path: '/deployments/5af49379-1c26-43f8-90e8-16d194a4c804',
    method: 'GET' } ]
[2014-02-17 15:44:56.976] [INFO] server - [ 'Request done, data: ',
  '[{"updatedAt": "2014-02-13 12:11:08.584713", "id": "neutron-test-everything3", "createdAt": "2014-02-13 12:11:08.584713", "plan": {"relationships": {"cloudify.relationships.depends_on": {"source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.depends_on", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}}, "cloudify.relationships.connected_to": {"source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.connected_to", "derived_from": "cloudify.relationships.depends_on", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}}, "cloudify.relationships.contained_in": {"source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.contained_in", "derived_from": "cloudify.relationships.depends_on", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}}}, "policies_events": {"start_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(tag \\"reachable\\" index)\\n", "message": "start detection passed"}, "performance_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"performance\\"\\n                                    :state \\"\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "performance monitoring"}, "failure_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [ip-event (assoc evnt :host \\"$node_id\\"\\n                             :service \\"ip\\"\\n                             :state (get evnt :host)\\n                             :description \\"$event\\"\\n                             :tags [\\"cosmo\\"])]\\n      (call-rescue ip-event [index]))\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"reachable\\"\\n                                    :state \\"false\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "detected failure"}}, "name": "neutron-test-everything3", "rules": {"state_equals": {"message": "${service} state has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (state \\"${state}\\"))\\n    $node_policy_events)\\n"}, "metric_below": {"message": "metric ${service} has dropped below a threshold of ${metric}, with a value of #{metric.value}", "rule": "(by [:host :service]\\n  (changed\\n      (fn [e]\\n          (and\\n              (not (nil? (:metric e)))\\n              (< (:metric e) ${metric})\\n          )\\n      )\\n      {:init false}\\n      (where\\n          (and\\n              (service \\"${service}\\")\\n              (and\\n                  (not (nil? metric))\\n                  (< metric ${metric})\\n              )\\n          )\\n          $node_policy_events\\n      )\\n  )\\n)\\n"}, "state_not_equals": {"message": "${service} has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (not (state \\"${state}\\")))\\n    $node_policy_events)\\n"}}, "policies": {"neutron_network": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "neutron_subnet": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}]}, "workflows": {"install": "define initialize_nodes\\n\\n    log message: \'Reloading policies\'\\n    event event: { \\"stage\\" => \\"Initializing monitoring policies\\" }\\n    reload_riemann_config app_id: \'${plan.name}\',\\n                          policies: \'$plan.policies\',\\n                          rules: \'$plan.rules\',\\n                          policies_events: \'$plan.policies_events\'\\n\\n    log message: \'processing nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${f:node}\'\\n        iterator on: \'$f:node.relationships\', to_v: \'relationship\'\\n            log message: \'waiting for node: ${node.id} relationship: ${v:relationship}\'\\n            state action: \'wait\', node_id: \'${v:relationship.target_id}\', reachable: \'true\'\\n        unset \'v:relationship\'\\n\\n        event event: { \\"stage\\" => \\"Creating node\\" }\\n        log message: \'executing create workflow for node: ${node.id}\'\\n        set \'v:create\': \\"$f:node.workflows.create\\"\\n        create\\n        unset \'v:create\'\\n\\n        execute_relationships_workflow workflow: \'preconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Configuring node\\" }\\n        log message: \'executing configure workflow for node: ${node.id}\'\\n        set \'v:configure\': \\"$f:node.workflows.configure\\"\\n        configure\\n        unset \'v:configure\'\\n\\n        execute_relationships_workflow workflow: \'postconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Starting node\\" }\\n        log message: \'executing start workflow for node: ${node.id}\'\\n        set \'v:start\': \\"$f:node.workflows.start\\"\\n        start\\n        unset \'v:start\'\\n\\n        state node_id: \'${node.id}\', reachable: \'true\'\\n\\n        execute_relationships_workflow workflow: \'establish\'\\n", "uninstall": "define uninstalling_nodes\\n    log message: \'uninstalling nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${node.id}\'\\n        # wait for all dependents to be uninstalled first\\n        iterator on: \'$f:node.dependents\', to_v: \'dependent\'\\n            log message: \'waiting for node: ${node.id} dependent: ${v:dependent}\'\\n            state action: \'wait\', node_id: \'${v:dependent}\', reachable: \'false\'\\n        unset \'v:dependent\'\\n\\n        state action: \'get\', node_id: \'${node.id}\', to_f: \'node_reachable\'\\n        log message: \'node reachable state is: ${node_reachable}\'\\n        # we only call uninstall on reachable nodes\\n        sequence if: \'${node_reachable} == true\'\\n            event event: { \\"stage\\" => \\"Stop node\\" }\\n            log message: \'executing stop workflow for node: ${node.id}\'\\n            set \'v:stop\': \\"$f:node.workflows.stop\\"\\n            stop\\n            unset \'v:stop\'\\n\\n            execute_relationships_workflow workflow: \'unlink\'\\n\\n            event event: { \\"stage\\" => \\"Delete node\\" }\\n            log message: \'executing delete workflow for node: ${node.id}\'\\n            set \'v:delete\': \\"$f:node.workflows.delete\\"\\n            delete\\n            unset \'v:delete\'\\n\\n            state action: \'wait\', node_id: \'${node.id}\', reachable: \'false\'\\n\\n    #TODO when we support multi app deployment, remove relevant policies from riemann"}, "nodes": [{"operations": {"create": {"operation": "network.create", "plugin": "cloudify.plugins.cloudify_plugin_openstack_neutron_provisioner"}, "cloudify.interfaces.lifecycle.create": {"operation": "network.create", "plugin": "cloudify.plugins.cloudify_plugin_openstack_neutron_provisioner"}}, "declared_type": "neutron_network", "name": "neutron_network", "workflows": {"start": "define node_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "properties": {"network": {"name": "neutron_network_test"}, "cloudify_runtime": {}}, "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "plugins": {"cloudify.plugins.cloudify_plugin_openstack_neutron_provisioner": {"url": "https://github.com/Fewbytes/cosmo-plugin-openstack-neutron-provisioner/archive/master.zip", "agent_plugin": "false", "name": "cloudify.plugins.cloudify_plugin_openstack_neutron_provisioner"}}, "dependents": ["neutron_subnet"], "type": "neutron_network", "id": "neutron_network"}, {"operations": {"create": {"operation": "subnet.create", "plugin": "cloudify.plugins.cloudify_plugin_openstack_neutron_provisioner"}, "cloudify.interfaces.lifecycle.create": {"operation": "subnet.create", "plugin": "cloudify.plugins.cloudify_plugin_openstack_neutron_provisioner"}}, "relationships": [{"source_operations": {}, "target_operations": {}, "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_id": "neutron_network", "state": "reachable", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "type": "cloudify.relationships.contained_in"}], "declared_type": "neutron_subnet", "name": "neutron_subnet", "workflows": {"start": "define node_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "properties": {"subnet": {"ip_version": 4, "cidr": "10.10.10.0/24", "name": "neutron_subnet_test"}, "cloudify_runtime": {}}, "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "plugins": {"cloudify.plugins.cloudify_plugin_openstack_neutron_provisioner": {"url": "https://github.com/Fewbytes/cosmo-plugin-openstack-neutron-provisioner/archive/master.zip", "agent_plugin": "false", "name": "cloudify.plugins.cloudify_plugin_openstack_neutron_provisioner"}}, "type": "neutron_subnet", "id": "neutron_subnet"}]}}, {"updatedAt": "2014-02-13 11:46:50.675804", "id": "hello_world2_3", "createdAt": "2014-02-13 11:46:50.675804", "plan": {"relationships": {"cloudify.relationships.depends_on": {"workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.depends_on", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}}, "cloudify.relationships.contained_in": {"workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.contained_in", "derived_from": "cloudify.relationships.depends_on", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}}, "cloudify.relationships.connected_to": {"workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.connected_to", "derived_from": "cloudify.relationships.depends_on", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}}}, "policies_events": {"start_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(tag \\"reachable\\" index)\\n", "message": "start detection passed"}, "performance_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"performance\\"\\n                                    :state \\"\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "performance monitoring"}, "failure_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [ip-event (assoc evnt :host \\"$node_id\\"\\n                             :service \\"ip\\"\\n                             :state (get evnt :host)\\n                             :description \\"$event\\"\\n                             :tags [\\"cosmo\\"])]\\n      (call-rescue ip-event [index]))\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"reachable\\"\\n                                    :state \\"false\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "detected failure"}}, "name": "hello_world2_3", "rules": {"state_equals": {"message": "${service} state has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (state \\"${state}\\"))\\n    $node_policy_events)\\n"}, "metric_below": {"message": "metric ${service} has dropped below a threshold of ${metric}, with a value of #{metric.value}", "rule": "(by [:host :service]\\n  (changed\\n      (fn [e]\\n          (and\\n              (not (nil? (:metric e)))\\n              (< (:metric e) ${metric})\\n          )\\n      )\\n      {:init false}\\n      (where\\n          (and\\n              (service \\"${service}\\")\\n              (and\\n                  (not (nil? metric))\\n                  (< metric ${metric})\\n              )\\n          )\\n          $node_policy_events\\n      )\\n  )\\n)\\n"}, "state_not_equals": {"message": "${service} has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (not (state \\"${state}\\")))\\n    $node_policy_events)\\n"}}, "policies": {"http_web_server": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "vm": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}]}, "workflows": {"install": "define initialize_nodes\\n\\n    log message: \'Reloading policies\'\\n    event event: { \\"stage\\" => \\"Initializing monitoring policies\\" }\\n    reload_riemann_config app_id: \'${plan.name}\',\\n                          policies: \'$plan.policies\',\\n                          rules: \'$plan.rules\',\\n                          policies_events: \'$plan.policies_events\'\\n\\n    log message: \'processing nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${f:node}\'\\n        iterator on: \'$f:node.relationships\', to_v: \'relationship\'\\n            log message: \'waiting for node: ${node.id} relationship: ${v:relationship}\'\\n            state action: \'wait\', node_id: \'${v:relationship.target_id}\', reachable: \'true\'\\n        unset \'v:relationship\'\\n\\n        event event: { \\"stage\\" => \\"Creating node\\" }\\n        log message: \'executing create workflow for node: ${node.id}\'\\n        set \'v:create\': \\"$f:node.workflows.create\\"\\n        create\\n        unset \'v:create\'\\n\\n        execute_relationships_workflow workflow: \'preconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Configuring node\\" }\\n        log message: \'executing configure workflow for node: ${node.id}\'\\n        set \'v:configure\': \\"$f:node.workflows.configure\\"\\n        configure\\n        unset \'v:configure\'\\n\\n        execute_relationships_workflow workflow: \'postconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Starting node\\" }\\n        log message: \'executing start workflow for node: ${node.id}\'\\n        set \'v:start\': \\"$f:node.workflows.start\\"\\n        start\\n        unset \'v:start\'\\n\\n        state node_id: \'${node.id}\', reachable: \'true\'\\n\\n        execute_relationships_workflow workflow: \'establish\'\\n", "uninstall": "define uninstalling_nodes\\n    log message: \'uninstalling nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${node.id}\'\\n        # wait for all dependents to be uninstalled first\\n        iterator on: \'$f:node.dependents\', to_v: \'dependent\'\\n            log message: \'waiting for node: ${node.id} dependent: ${v:dependent}\'\\n            state action: \'wait\', node_id: \'${v:dependent}\', reachable: \'false\'\\n        unset \'v:dependent\'\\n\\n        state action: \'get\', node_id: \'${node.id}\', to_f: \'node_reachable\'\\n        log message: \'node reachable state is: ${node_reachable}\'\\n        # we only call uninstall on reachable nodes\\n        sequence if: \'${node_reachable} == true\'\\n            event event: { \\"stage\\" => \\"Stop node\\" }\\n            log message: \'executing stop workflow for node: ${node.id}\'\\n            set \'v:stop\': \\"$f:node.workflows.stop\\"\\n            stop\\n            unset \'v:stop\'\\n\\n            execute_relationships_workflow workflow: \'unlink\'\\n\\n            event event: { \\"stage\\" => \\"Delete node\\" }\\n            log message: \'executing delete workflow for node: ${node.id}\'\\n            set \'v:delete\': \\"$f:node.workflows.delete\\"\\n            delete\\n            unset \'v:delete\'\\n\\n            state action: \'wait\', node_id: \'${node.id}\', reachable: \'false\'\\n\\n    #TODO when we support multi app deployment, remove relevant policies from riemann"}, "nodes": [{"operations": {"cloudify.interfaces.lifecycle.configure": {"operation": "tasks.configure", "plugin": "python_webserver_installer"}, "start": {"operation": "tasks.start", "plugin": "python_webserver_installer"}, "cloudify.interfaces.lifecycle.start": {"operation": "tasks.start", "plugin": "python_webserver_installer"}, "configure": {"operation": "tasks.configure", "plugin": "python_webserver_installer"}}, "relationships": [{"source_operations": {}, "target_operations": {}, "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_id": "vm", "state": "reachable", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "type": "cloudify.relationships.contained_in"}], "declared_type": "cloudify.types.web_server", "name": "http_web_server", "plugins": {"python_webserver_installer": {"url": "https://github.com/CloudifySource/cosmo-plugin-python-webserver/archive/develop.zip", "agent_plugin": "true", "name": "python_webserver_installer"}}, "id": "http_web_server", "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "workflows": {"start": "define node_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "host_id": "vm", "type": "web_server", "properties": {"port": 8080, "cloudify_runtime": {}}}, {"operations": {"cloudify.interfaces.lifecycle.start": {"operation": "tasks.start", "plugin": "openstack_host_provisioner"}, "cloudify.interfaces.worker_installer.start": {"operation": "tasks.start", "plugin": "worker_installer"}, "cloudify.interfaces.lifecycle.create": {"operation": "tasks.provision", "plugin": "openstack_host_provisioner"}, "get": {"operation": "tasks.get", "plugin": "kv_store"}, "create": {"operation": "tasks.provision", "plugin": "openstack_host_provisioner"}, "cloudify.interfaces.worker_installer.restart": {"operation": "tasks.restart", "plugin": "worker_installer"}, "cloudify.interfaces.kv_store.get": {"operation": "tasks.get", "plugin": "kv_store"}, "cloudify.interfaces.worker_installer.install": {"operation": "tasks.install", "plugin": "worker_installer"}, "put": {"operation": "tasks.put", "plugin": "kv_store"}, "cloudify.interfaces.plugin_installer.install": {"operation": "tasks.install", "plugin": "plugin_installer"}, "cloudify.interfaces.kv_store.put": {"operation": "tasks.put", "plugin": "kv_store"}, "restart": {"operation": "tasks.restart", "plugin": "worker_installer"}}, "declared_type": "cloudify.types.host", "name": "vm", "plugins_to_install": [{"url": "https://github.com/CloudifySource/cosmo-plugin-python-webserver/archive/develop.zip", "agent_plugin": "true", "name": "python_webserver_installer"}], "plugins": {"plugin_installer": {"url": "cloudify/poc/plugins/celery-worker-plugin-installer.zip", "agent_plugin": "true", "name": "plugin_installer"}, "kv_store": {"url": "cloudify/poc/plugins/kv_store.zip", "agent_plugin": "true", "name": "kv_store"}, "openstack_host_provisioner": {"url": "cloudify/plugins/vagrant-host-plugin.zip", "agent_plugin": "false", "name": "openstack_host_provisioner"}, "worker_installer": {"url": "cloudify/poc/plugins/celery-worker-installer.zip", "agent_plugin": "false", "name": "worker_installer"}}, "id": "vm", "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "workflows": {"start": "define host_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n    sequence if: \'${node.properties.install_agent} == true\'\\n        state action: \'wait\', node_id: \'${node.id}\', reachable: \'true\'\\n        log message: \'installing agent on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.install\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.start\'\\n        event event: { \\"stage\\" => \\"Installing plugins\\" }\\n        log message: \'installing plugins on host: ${node.id} - plugins: ${node.plugins_to_install}\'\\n        iterator on: \'$node.plugins_to_install\', to_v: \'plugin\'\\n            log message: \'installing plugin: ${v:plugin.name} on host: ${node.id}\'\\n            execute_operation operation: \'cloudify.interfaces.plugin_installer.install\', params: {\\n                plugin: {\\n                    name: \'${v:plugin.name}\',\\n                    url: \'${v:plugin.url}\'\\n                 }\\n            }\\n            log message: \'successfully installed plugin: ${v:plugin.name} on host: ${node.id}\'\\n        log message: \'restarting worker on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.restart\'\\n        execute_operation operation: \'cloudify.interfaces.kv_store.put\', params: {\\n            key: \\"agent plugins installed\\",\\n            value: true\\n        }\\n\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "host_id": "vm", "dependents": ["http_web_server"], "type": "openstack_host", "properties": {"nova_config": {"instance": {"key_name": "cloudify-agents-kp", "flavor": 101, "image": 67074, "name": "sanity_hello_world_vm1"}, "region": "az-3.region-a.geo-1"}, "install_agent": true, "cloudify_runtime": {}, "worker_config": {"port": 22, "key": "/home/ubuntu/.ssh/cloudify-agents-kp.pem", "user": "ubuntu"}}}]}}, {"updatedAt": "2014-02-13 13:48:30.430791", "id": "hello_world5", "createdAt": "2014-02-13 13:48:30.430791", "plan": {"relationships": {"cloudify.relationships.depends_on": {"workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.depends_on", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}}, "cloudify.relationships.contained_in": {"workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.contained_in", "derived_from": "cloudify.relationships.depends_on", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}}, "cloudify.relationships.connected_to": {"workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.connected_to", "derived_from": "cloudify.relationships.depends_on", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}}}, "policies_events": {"start_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(tag \\"reachable\\" index)\\n", "message": "start detection passed"}, "performance_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"performance\\"\\n                                    :state \\"\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "performance monitoring"}, "failure_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [ip-event (assoc evnt :host \\"$node_id\\"\\n                             :service \\"ip\\"\\n                             :state (get evnt :host)\\n                             :description \\"$event\\"\\n                             :tags [\\"cosmo\\"])]\\n      (call-rescue ip-event [index]))\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"reachable\\"\\n                                    :state \\"false\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "detected failure"}}, "name": "hello_world5", "rules": {"state_equals": {"message": "${service} state has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (state \\"${state}\\"))\\n    $node_policy_events)\\n"}, "metric_below": {"message": "metric ${service} has dropped below a threshold of ${metric}, with a value of #{metric.value}", "rule": "(by [:host :service]\\n  (changed\\n      (fn [e]\\n          (and\\n              (not (nil? (:metric e)))\\n              (< (:metric e) ${metric})\\n          )\\n      )\\n      {:init false}\\n      (where\\n          (and\\n              (service \\"${service}\\")\\n              (and\\n                  (not (nil? metric))\\n                  (< metric ${metric})\\n              )\\n          )\\n          $node_policy_events\\n      )\\n  )\\n)\\n"}, "state_not_equals": {"message": "${service} has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (not (state \\"${state}\\")))\\n    $node_policy_events)\\n"}}, "policies": {"http_web_server": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "vm": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}]}, "workflows": {"install": "define initialize_nodes\\n\\n    log message: \'Reloading policies\'\\n    event event: { \\"stage\\" => \\"Initializing monitoring policies\\" }\\n    reload_riemann_config app_id: \'${plan.name}\',\\n                          policies: \'$plan.policies\',\\n                          rules: \'$plan.rules\',\\n                          policies_events: \'$plan.policies_events\'\\n\\n    log message: \'processing nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${f:node}\'\\n        iterator on: \'$f:node.relationships\', to_v: \'relationship\'\\n            log message: \'waiting for node: ${node.id} relationship: ${v:relationship}\'\\n            state action: \'wait\', node_id: \'${v:relationship.target_id}\', reachable: \'true\'\\n        unset \'v:relationship\'\\n\\n        event event: { \\"stage\\" => \\"Creating node\\" }\\n        log message: \'executing create workflow for node: ${node.id}\'\\n        set \'v:create\': \\"$f:node.workflows.create\\"\\n        create\\n        unset \'v:create\'\\n\\n        execute_relationships_workflow workflow: \'preconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Configuring node\\" }\\n        log message: \'executing configure workflow for node: ${node.id}\'\\n        set \'v:configure\': \\"$f:node.workflows.configure\\"\\n        configure\\n        unset \'v:configure\'\\n\\n        execute_relationships_workflow workflow: \'postconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Starting node\\" }\\n        log message: \'executing start workflow for node: ${node.id}\'\\n        set \'v:start\': \\"$f:node.workflows.start\\"\\n        start\\n        unset \'v:start\'\\n\\n        state node_id: \'${node.id}\', reachable: \'true\'\\n\\n        execute_relationships_workflow workflow: \'establish\'\\n", "uninstall": "define uninstalling_nodes\\n    log message: \'uninstalling nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${node.id}\'\\n        # wait for all dependents to be uninstalled first\\n        iterator on: \'$f:node.dependents\', to_v: \'dependent\'\\n            log message: \'waiting for node: ${node.id} dependent: ${v:dependent}\'\\n            state action: \'wait\', node_id: \'${v:dependent}\', reachable: \'false\'\\n        unset \'v:dependent\'\\n\\n        state action: \'get\', node_id: \'${node.id}\', to_f: \'node_reachable\'\\n        log message: \'node reachable state is: ${node_reachable}\'\\n        # we only call uninstall on reachable nodes\\n        sequence if: \'${node_reachable} == true\'\\n            event event: { \\"stage\\" => \\"Stop node\\" }\\n            log message: \'executing stop workflow for node: ${node.id}\'\\n            set \'v:stop\': \\"$f:node.workflows.stop\\"\\n            stop\\n            unset \'v:stop\'\\n\\n            execute_relationships_workflow workflow: \'unlink\'\\n\\n            event event: { \\"stage\\" => \\"Delete node\\" }\\n            log message: \'executing delete workflow for node: ${node.id}\'\\n            set \'v:delete\': \\"$f:node.workflows.delete\\"\\n            delete\\n            unset \'v:delete\'\\n\\n            state action: \'wait\', node_id: \'${node.id}\', reachable: \'false\'\\n\\n    #TODO when we support multi app deployment, remove relevant policies from riemann"}, "nodes": [{"operations": {"cloudify.interfaces.lifecycle.configure": {"operation": "tasks.configure", "plugin": "python_webserver_installer"}, "start": {"operation": "tasks.start", "plugin": "python_webserver_installer"}, "cloudify.interfaces.lifecycle.start": {"operation": "tasks.start", "plugin": "python_webserver_installer"}, "configure": {"operation": "tasks.configure", "plugin": "python_webserver_installer"}}, "relationships": [{"source_operations": {}, "target_operations": {}, "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_id": "vm", "state": "reachable", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "type": "cloudify.relationships.contained_in"}], "declared_type": "cloudify.types.web_server", "name": "http_web_server", "plugins": {"python_webserver_installer": {"url": "https://github.com/CloudifySource/cosmo-plugin-python-webserver/archive/develop.zip", "agent_plugin": "true", "name": "python_webserver_installer"}}, "id": "http_web_server", "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "workflows": {"start": "define node_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "host_id": "vm", "type": "web_server", "properties": {"port": 8080, "cloudify_runtime": {}}}, {"operations": {"cloudify.interfaces.lifecycle.start": {"operation": "tasks.start", "plugin": "openstack_host_provisioner"}, "cloudify.interfaces.worker_installer.start": {"operation": "tasks.start", "plugin": "worker_installer"}, "cloudify.interfaces.lifecycle.create": {"operation": "tasks.provision", "plugin": "openstack_host_provisioner"}, "get": {"operation": "tasks.get", "plugin": "kv_store"}, "create": {"operation": "tasks.provision", "plugin": "openstack_host_provisioner"}, "cloudify.interfaces.worker_installer.restart": {"operation": "tasks.restart", "plugin": "worker_installer"}, "cloudify.interfaces.kv_store.get": {"operation": "tasks.get", "plugin": "kv_store"}, "cloudify.interfaces.worker_installer.install": {"operation": "tasks.install", "plugin": "worker_installer"}, "put": {"operation": "tasks.put", "plugin": "kv_store"}, "cloudify.interfaces.plugin_installer.install": {"operation": "tasks.install", "plugin": "plugin_installer"}, "cloudify.interfaces.kv_store.put": {"operation": "tasks.put", "plugin": "kv_store"}, "restart": {"operation": "tasks.restart", "plugin": "worker_installer"}}, "declared_type": "cloudify.types.host", "name": "vm", "plugins_to_install": [{"url": "https://github.com/CloudifySource/cosmo-plugin-python-webserver/archive/develop.zip", "agent_plugin": "true", "name": "python_webserver_installer"}], "plugins": {"plugin_installer": {"url": "cloudify/poc/plugins/celery-worker-plugin-installer.zip", "agent_plugin": "true", "name": "plugin_installer"}, "kv_store": {"url": "cloudify/poc/plugins/kv_store.zip", "agent_plugin": "true", "name": "kv_store"}, "openstack_host_provisioner": {"url": "cloudify/plugins/vagrant-host-plugin.zip", "agent_plugin": "false", "name": "openstack_host_provisioner"}, "worker_installer": {"url": "cloudify/poc/plugins/celery-worker-installer.zip", "agent_plugin": "false", "name": "worker_installer"}}, "id": "vm", "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "workflows": {"start": "define host_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n    sequence if: \'${node.properties.install_agent} == true\'\\n        state action: \'wait\', node_id: \'${node.id}\', reachable: \'true\'\\n        log message: \'installing agent on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.install\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.start\'\\n        event event: { \\"stage\\" => \\"Installing plugins\\" }\\n        log message: \'installing plugins on host: ${node.id} - plugins: ${node.plugins_to_install}\'\\n        iterator on: \'$node.plugins_to_install\', to_v: \'plugin\'\\n            log message: \'installing plugin: ${v:plugin.name} on host: ${node.id}\'\\n            execute_operation operation: \'cloudify.interfaces.plugin_installer.install\', params: {\\n                plugin: {\\n                    name: \'${v:plugin.name}\',\\n                    url: \'${v:plugin.url}\'\\n                 }\\n            }\\n            log message: \'successfully installed plugin: ${v:plugin.name} on host: ${node.id}\'\\n        log message: \'restarting worker on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.restart\'\\n        execute_operation operation: \'cloudify.interfaces.kv_store.put\', params: {\\n            key: \\"agent plugins installed\\",\\n            value: true\\n        }\\n\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "host_id": "vm", "dependents": ["http_web_server"], "type": "openstack_host", "properties": {"nova_config": {"instance": {"key_name": "cloudify-agents-kp", "flavor": 101, "image": 48335, "name": "sanity_hello_world_vm1"}, "region": "az-3.region-a.geo-1"}, "install_agent": true, "cloudify_runtime": {}, "worker_config": {"port": 22, "key": "/home/ubuntu/.ssh/cloudify-agents-kp.pem", "user": "ubuntu"}}}]}}, {"updatedAt": "2014-02-13 11:44:08.768432", "id": "hello_world2_1", "createdAt": "2014-02-13 11:44:08.768432", "plan": {"relationships": {"cloudify.relationships.depends_on": {"workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.depends_on", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}}, "cloudify.relationships.contained_in": {"workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.contained_in", "derived_from": "cloudify.relationships.depends_on", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}}, "cloudify.relationships.connected_to": {"workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.connected_to", "derived_from": "cloudify.relationships.depends_on", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}}}, "policies_events": {"start_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(tag \\"reachable\\" index)\\n", "message": "start detection passed"}, "performance_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"performance\\"\\n                                    :state \\"\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "performance monitoring"}, "failure_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [ip-event (assoc evnt :host \\"$node_id\\"\\n                             :service \\"ip\\"\\n                             :state (get evnt :host)\\n                             :description \\"$event\\"\\n                             :tags [\\"cosmo\\"])]\\n      (call-rescue ip-event [index]))\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"reachable\\"\\n                                    :state \\"false\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "detected failure"}}, "name": "hello_world2_1", "rules": {"state_equals": {"message": "${service} state has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (state \\"${state}\\"))\\n    $node_policy_events)\\n"}, "metric_below": {"message": "metric ${service} has dropped below a threshold of ${metric}, with a value of #{metric.value}", "rule": "(by [:host :service]\\n  (changed\\n      (fn [e]\\n          (and\\n              (not (nil? (:metric e)))\\n              (< (:metric e) ${metric})\\n          )\\n      )\\n      {:init false}\\n      (where\\n          (and\\n              (service \\"${service}\\")\\n              (and\\n                  (not (nil? metric))\\n                  (< metric ${metric})\\n              )\\n          )\\n          $node_policy_events\\n      )\\n  )\\n)\\n"}, "state_not_equals": {"message": "${service} has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (not (state \\"${state}\\")))\\n    $node_policy_events)\\n"}}, "policies": {"http_web_server": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "vm": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}]}, "workflows": {"install": "define initialize_nodes\\n\\n    log message: \'Reloading policies\'\\n    event event: { \\"stage\\" => \\"Initializing monitoring policies\\" }\\n    reload_riemann_config app_id: \'${plan.name}\',\\n                          policies: \'$plan.policies\',\\n                          rules: \'$plan.rules\',\\n                          policies_events: \'$plan.policies_events\'\\n\\n    log message: \'processing nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${f:node}\'\\n        iterator on: \'$f:node.relationships\', to_v: \'relationship\'\\n            log message: \'waiting for node: ${node.id} relationship: ${v:relationship}\'\\n            state action: \'wait\', node_id: \'${v:relationship.target_id}\', reachable: \'true\'\\n        unset \'v:relationship\'\\n\\n        event event: { \\"stage\\" => \\"Creating node\\" }\\n        log message: \'executing create workflow for node: ${node.id}\'\\n        set \'v:create\': \\"$f:node.workflows.create\\"\\n        create\\n        unset \'v:create\'\\n\\n        execute_relationships_workflow workflow: \'preconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Configuring node\\" }\\n        log message: \'executing configure workflow for node: ${node.id}\'\\n        set \'v:configure\': \\"$f:node.workflows.configure\\"\\n        configure\\n        unset \'v:configure\'\\n\\n        execute_relationships_workflow workflow: \'postconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Starting node\\" }\\n        log message: \'executing start workflow for node: ${node.id}\'\\n        set \'v:start\': \\"$f:node.workflows.start\\"\\n        start\\n        unset \'v:start\'\\n\\n        state node_id: \'${node.id}\', reachable: \'true\'\\n\\n        execute_relationships_workflow workflow: \'establish\'\\n", "uninstall": "define uninstalling_nodes\\n    log message: \'uninstalling nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${node.id}\'\\n        # wait for all dependents to be uninstalled first\\n        iterator on: \'$f:node.dependents\', to_v: \'dependent\'\\n            log message: \'waiting for node: ${node.id} dependent: ${v:dependent}\'\\n            state action: \'wait\', node_id: \'${v:dependent}\', reachable: \'false\'\\n        unset \'v:dependent\'\\n\\n        state action: \'get\', node_id: \'${node.id}\', to_f: \'node_reachable\'\\n        log message: \'node reachable state is: ${node_reachable}\'\\n        # we only call uninstall on reachable nodes\\n        sequence if: \'${node_reachable} == true\'\\n            event event: { \\"stage\\" => \\"Stop node\\" }\\n            log message: \'executing stop workflow for node: ${node.id}\'\\n            set \'v:stop\': \\"$f:node.workflows.stop\\"\\n            stop\\n            unset \'v:stop\'\\n\\n            execute_relationships_workflow workflow: \'unlink\'\\n\\n            event event: { \\"stage\\" => \\"Delete node\\" }\\n            log message: \'executing delete workflow for node: ${node.id}\'\\n            set \'v:delete\': \\"$f:node.workflows.delete\\"\\n            delete\\n            unset \'v:delete\'\\n\\n            state action: \'wait\', node_id: \'${node.id}\', reachable: \'false\'\\n\\n    #TODO when we support multi app deployment, remove relevant policies from riemann"}, "nodes": [{"operations": {"cloudify.interfaces.lifecycle.configure": {"operation": "tasks.configure", "plugin": "python_webserver_installer"}, "start": {"operation": "tasks.start", "plugin": "python_webserver_installer"}, "cloudify.interfaces.lifecycle.start": {"operation": "tasks.start", "plugin": "python_webserver_installer"}, "configure": {"operation": "tasks.configure", "plugin": "python_webserver_installer"}}, "relationships": [{"source_operations": {}, "target_operations": {}, "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_id": "vm", "state": "reachable", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "type": "cloudify.relationships.contained_in"}], "declared_type": "cloudify.types.web_server", "name": "http_web_server", "plugins": {"python_webserver_installer": {"url": "https://github.com/CloudifySource/cosmo-plugin-python-webserver/archive/develop.zip", "agent_plugin": "true", "name": "python_webserver_installer"}}, "id": "http_web_server", "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "workflows": {"start": "define node_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "host_id": "vm", "type": "web_server", "properties": {"port": 8080, "cloudify_runtime": {}}}, {"operations": {"cloudify.interfaces.lifecycle.start": {"operation": "tasks.start", "plugin": "openstack_host_provisioner"}, "cloudify.interfaces.worker_installer.start": {"operation": "tasks.start", "plugin": "worker_installer"}, "cloudify.interfaces.lifecycle.create": {"operation": "tasks.provision", "plugin": "openstack_host_provisioner"}, "get": {"operation": "tasks.get", "plugin": "kv_store"}, "create": {"operation": "tasks.provision", "plugin": "openstack_host_provisioner"}, "cloudify.interfaces.worker_installer.restart": {"operation": "tasks.restart", "plugin": "worker_installer"}, "cloudify.interfaces.kv_store.get": {"operation": "tasks.get", "plugin": "kv_store"}, "cloudify.interfaces.worker_installer.install": {"operation": "tasks.install", "plugin": "worker_installer"}, "put": {"operation": "tasks.put", "plugin": "kv_store"}, "cloudify.interfaces.plugin_installer.install": {"operation": "tasks.install", "plugin": "plugin_installer"}, "cloudify.interfaces.kv_store.put": {"operation": "tasks.put", "plugin": "kv_store"}, "restart": {"operation": "tasks.restart", "plugin": "worker_installer"}}, "declared_type": "cloudify.types.host", "name": "vm", "plugins_to_install": [{"url": "https://github.com/CloudifySource/cosmo-plugin-python-webserver/archive/develop.zip", "agent_plugin": "true", "name": "python_webserver_installer"}], "plugins": {"plugin_installer": {"url": "cloudify/poc/plugins/celery-worker-plugin-installer.zip", "agent_plugin": "true", "name": "plugin_installer"}, "kv_store": {"url": "cloudify/poc/plugins/kv_store.zip", "agent_plugin": "true", "name": "kv_store"}, "openstack_host_provisioner": {"url": "cloudify/plugins/vagrant-host-plugin.zip", "agent_plugin": "false", "name": "openstack_host_provisioner"}, "worker_installer": {"url": "cloudify/poc/plugins/celery-worker-installer.zip", "agent_plugin": "false", "name": "worker_installer"}}, "id": "vm", "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "workflows": {"start": "define host_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n    sequence if: \'${node.properties.install_agent} == true\'\\n        state action: \'wait\', node_id: \'${node.id}\', reachable: \'true\'\\n        log message: \'installing agent on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.install\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.start\'\\n        event event: { \\"stage\\" => \\"Installing plugins\\" }\\n        log message: \'installing plugins on host: ${node.id} - plugins: ${node.plugins_to_install}\'\\n        iterator on: \'$node.plugins_to_install\', to_v: \'plugin\'\\n            log message: \'installing plugin: ${v:plugin.name} on host: ${node.id}\'\\n            execute_operation operation: \'cloudify.interfaces.plugin_installer.install\', params: {\\n                plugin: {\\n                    name: \'${v:plugin.name}\',\\n                    url: \'${v:plugin.url}\'\\n                 }\\n            }\\n            log message: \'successfully installed plugin: ${v:plugin.name} on host: ${node.id}\'\\n        log message: \'restarting worker on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.restart\'\\n        execute_operation operation: \'cloudify.interfaces.kv_store.put\', params: {\\n            key: \\"agent plugins installed\\",\\n            value: true\\n        }\\n\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "host_id": "vm", "dependents": ["http_web_server"], "type": "openstack_host", "properties": {"nova_config": {"instance": {"key_name": "cloudify-agents-kp", "flavor": 101, "image": 67074, "name": "sanity_hello_world_vm1"}, "region": "az-3.region-a.geo-1"}, "install_agent": true, "cloudify_runtime": {}, "worker_config": {"port": 22, "key": "/home/ubuntu/.ssh/cloudify-agents-kp.pem", "user": "ubuntu"}}}]}}, {"updatedAt": "2014-02-12 15:51:31.395269", "id": "hello_world3", "createdAt": "2014-02-12 15:51:31.395269", "plan": {"relationships": {"cloudify.relationships.depends_on": {"workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.depends_on", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}}, "cloudify.relationships.contained_in": {"workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.contained_in", "derived_from": "cloudify.relationships.depends_on", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}}, "cloudify.relationships.connected_to": {"workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.connected_to", "derived_from": "cloudify.relationships.depends_on", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}}}, "policies_events": {"start_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(tag \\"reachable\\" index)\\n", "message": "start detection passed"}, "performance_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"performance\\"\\n                                    :state \\"\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "performance monitoring"}, "failure_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [ip-event (assoc evnt :host \\"$node_id\\"\\n                             :service \\"ip\\"\\n                             :state (get evnt :host)\\n                             :description \\"$event\\"\\n                             :tags [\\"cosmo\\"])]\\n      (call-rescue ip-event [index]))\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"reachable\\"\\n                                    :state \\"false\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "detected failure"}}, "name": "hello_world3", "rules": {"state_equals": {"message": "${service} state has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (state \\"${state}\\"))\\n    $node_policy_events)\\n"}, "metric_below": {"message": "metric ${service} has dropped below a threshold of ${metric}, with a value of #{metric.value}", "rule": "(by [:host :service]\\n  (changed\\n      (fn [e]\\n          (and\\n              (not (nil? (:metric e)))\\n              (< (:metric e) ${metric})\\n          )\\n      )\\n      {:init false}\\n      (where\\n          (and\\n              (service \\"${service}\\")\\n              (and\\n                  (not (nil? metric))\\n                  (< metric ${metric})\\n              )\\n          )\\n          $node_policy_events\\n      )\\n  )\\n)\\n"}, "state_not_equals": {"message": "${service} has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (not (state \\"${state}\\")))\\n    $node_policy_events)\\n"}}, "policies": {"http_web_server": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "vm": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}]}, "workflows": {"install": "define initialize_nodes\\n\\n    log message: \'Reloading policies\'\\n    event event: { \\"stage\\" => \\"Initializing monitoring policies\\" }\\n    reload_riemann_config app_id: \'${plan.name}\',\\n                          policies: \'$plan.policies\',\\n                          rules: \'$plan.rules\',\\n                          policies_events: \'$plan.policies_events\'\\n\\n    log message: \'processing nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${f:node}\'\\n        iterator on: \'$f:node.relationships\', to_v: \'relationship\'\\n            log message: \'waiting for node: ${node.id} relationship: ${v:relationship}\'\\n            state action: \'wait\', node_id: \'${v:relationship.target_id}\', reachable: \'true\'\\n        unset \'v:relationship\'\\n\\n        event event: { \\"stage\\" => \\"Creating node\\" }\\n        log message: \'executing create workflow for node: ${node.id}\'\\n        set \'v:create\': \\"$f:node.workflows.create\\"\\n        create\\n        unset \'v:create\'\\n\\n        execute_relationships_workflow workflow: \'preconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Configuring node\\" }\\n        log message: \'executing configure workflow for node: ${node.id}\'\\n        set \'v:configure\': \\"$f:node.workflows.configure\\"\\n        configure\\n        unset \'v:configure\'\\n\\n        execute_relationships_workflow workflow: \'postconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Starting node\\" }\\n        log message: \'executing start workflow for node: ${node.id}\'\\n        set \'v:start\': \\"$f:node.workflows.start\\"\\n        start\\n        unset \'v:start\'\\n\\n        state node_id: \'${node.id}\', reachable: \'true\'\\n\\n        execute_relationships_workflow workflow: \'establish\'\\n", "uninstall": "define uninstalling_nodes\\n    log message: \'uninstalling nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${node.id}\'\\n        # wait for all dependents to be uninstalled first\\n        iterator on: \'$f:node.dependents\', to_v: \'dependent\'\\n            log message: \'waiting for node: ${node.id} dependent: ${v:dependent}\'\\n            state action: \'wait\', node_id: \'${v:dependent}\', reachable: \'false\'\\n        unset \'v:dependent\'\\n\\n        state action: \'get\', node_id: \'${node.id}\', to_f: \'node_reachable\'\\n        log message: \'node reachable state is: ${node_reachable}\'\\n        # we only call uninstall on reachable nodes\\n        sequence if: \'${node_reachable} == true\'\\n            event event: { \\"stage\\" => \\"Stop node\\" }\\n            log message: \'executing stop workflow for node: ${node.id}\'\\n            set \'v:stop\': \\"$f:node.workflows.stop\\"\\n            stop\\n            unset \'v:stop\'\\n\\n            execute_relationships_workflow workflow: \'unlink\'\\n\\n            event event: { \\"stage\\" => \\"Delete node\\" }\\n            log message: \'executing delete workflow for node: ${node.id}\'\\n            set \'v:delete\': \\"$f:node.workflows.delete\\"\\n            delete\\n            unset \'v:delete\'\\n\\n            state action: \'wait\', node_id: \'${node.id}\', reachable: \'false\'\\n\\n    #TODO when we support multi app deployment, remove relevant policies from riemann"}, "nodes": [{"operations": {"cloudify.interfaces.lifecycle.configure": {"operation": "tasks.configure", "plugin": "python_webserver_installer"}, "start": {"operation": "tasks.start", "plugin": "python_webserver_installer"}, "cloudify.interfaces.lifecycle.start": {"operation": "tasks.start", "plugin": "python_webserver_installer"}, "configure": {"operation": "tasks.configure", "plugin": "python_webserver_installer"}}, "relationships": [{"source_operations": {}, "target_operations": {}, "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_id": "vm", "state": "reachable", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "type": "cloudify.relationships.contained_in"}], "declared_type": "cloudify.types.web_server", "name": "http_web_server", "plugins": {"python_webserver_installer": {"url": "https://github.com/CloudifySource/cosmo-plugin-python-webserver/archive/develop.zip", "agent_plugin": "true", "name": "python_webserver_installer"}}, "id": "http_web_server", "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "workflows": {"start": "define node_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "host_id": "vm", "type": "web_server", "properties": {"port": 8080, "cloudify_runtime": {}}}, {"operations": {"cloudify.interfaces.lifecycle.start": {"operation": "tasks.start", "plugin": "openstack_host_provisioner"}, "cloudify.interfaces.worker_installer.start": {"operation": "tasks.start", "plugin": "worker_installer"}, "cloudify.interfaces.lifecycle.create": {"operation": "tasks.provision", "plugin": "openstack_host_provisioner"}, "get": {"operation": "tasks.get", "plugin": "kv_store"}, "create": {"operation": "tasks.provision", "plugin": "openstack_host_provisioner"}, "cloudify.interfaces.worker_installer.restart": {"operation": "tasks.restart", "plugin": "worker_installer"}, "cloudify.interfaces.kv_store.get": {"operation": "tasks.get", "plugin": "kv_store"}, "cloudify.interfaces.worker_installer.install": {"operation": "tasks.install", "plugin": "worker_installer"}, "put": {"operation": "tasks.put", "plugin": "kv_store"}, "cloudify.interfaces.plugin_installer.install": {"operation": "tasks.install", "plugin": "plugin_installer"}, "cloudify.interfaces.kv_store.put": {"operation": "tasks.put", "plugin": "kv_store"}, "restart": {"operation": "tasks.restart", "plugin": "worker_installer"}}, "declared_type": "cloudify.types.host", "name": "vm", "plugins_to_install": [{"url": "https://github.com/CloudifySource/cosmo-plugin-python-webserver/archive/develop.zip", "agent_plugin": "true", "name": "python_webserver_installer"}], "plugins": {"plugin_installer": {"url": "cloudify/poc/plugins/celery-worker-plugin-installer.zip", "agent_plugin": "true", "name": "plugin_installer"}, "kv_store": {"url": "cloudify/poc/plugins/kv_store.zip", "agent_plugin": "true", "name": "kv_store"}, "openstack_host_provisioner": {"url": "cloudify/plugins/vagrant-host-plugin.zip", "agent_plugin": "false", "name": "openstack_host_provisioner"}, "worker_installer": {"url": "cloudify/poc/plugins/celery-worker-installer.zip", "agent_plugin": "false", "name": "worker_installer"}}, "id": "vm", "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "workflows": {"start": "define host_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n    sequence if: \'${node.properties.install_agent} == true\'\\n        state action: \'wait\', node_id: \'${node.id}\', reachable: \'true\'\\n        log message: \'installing agent on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.install\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.start\'\\n        event event: { \\"stage\\" => \\"Installing plugins\\" }\\n        log message: \'installing plugins on host: ${node.id} - plugins: ${node.plugins_to_install}\'\\n        iterator on: \'$node.plugins_to_install\', to_v: \'plugin\'\\n            log message: \'installing plugin: ${v:plugin.name} on host: ${node.id}\'\\n            execute_operation operation: \'cloudify.interfaces.plugin_installer.install\', params: {\\n                plugin: {\\n                    name: \'${v:plugin.name}\',\\n                    url: \'${v:plugin.url}\'\\n                 }\\n            }\\n            log message: \'successfully installed plugin: ${v:plugin.name} on host: ${node.id}\'\\n        log message: \'restarting worker on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.restart\'\\n        execute_operation operation: \'cloudify.interfaces.kv_store.put\', params: {\\n            key: \\"agent plugins installed\\",\\n            value: true\\n        }\\n\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "host_id": "vm", "dependents": ["http_web_server"], "type": "openstack_host", "properties": {"nova_config": {"instance": {"key_name": "cloudify-agents-kp", "flavor": 101, "image": 67074, "name": "sanity_hello_world_vm"}, "region": "az-3.region-a.geo-1"}, "install_agent": true, "cloudify_runtime": {}, "worker_config": {"port": 22, "key": "/home/ubuntu/.ssh/cloudify-agents-kp.pem", "user": "ubuntu"}}}]}}, {"updatedAt": "2014-02-13 08:56:45.455843", "id": "hello_world2", "createdAt": "2014-02-13 08:56:45.455843", "plan": {"relationships": {"cloudify.relationships.depends_on": {"workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.depends_on", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}}, "cloudify.relationships.contained_in": {"workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.contained_in", "derived_from": "cloudify.relationships.depends_on", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}}, "cloudify.relationships.connected_to": {"workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.connected_to", "derived_from": "cloudify.relationships.depends_on", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}}}, "policies_events": {"start_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(tag \\"reachable\\" index)\\n", "message": "start detection passed"}, "performance_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"performance\\"\\n                                    :state \\"\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "performance monitoring"}, "failure_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [ip-event (assoc evnt :host \\"$node_id\\"\\n                             :service \\"ip\\"\\n                             :state (get evnt :host)\\n                             :description \\"$event\\"\\n                             :tags [\\"cosmo\\"])]\\n      (call-rescue ip-event [index]))\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"reachable\\"\\n                                    :state \\"false\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "detected failure"}}, "name": "hello_world2", "rules": {"state_equals": {"message": "${service} state has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (state \\"${state}\\"))\\n    $node_policy_events)\\n"}, "metric_below": {"message": "metric ${service} has dropped below a threshold of ${metric}, with a value of #{metric.value}", "rule": "(by [:host :service]\\n  (changed\\n      (fn [e]\\n          (and\\n              (not (nil? (:metric e)))\\n              (< (:metric e) ${metric})\\n          )\\n      )\\n      {:init false}\\n      (where\\n          (and\\n              (service \\"${service}\\")\\n              (and\\n                  (not (nil? metric))\\n                  (< metric ${metric})\\n              )\\n          )\\n          $node_policy_events\\n      )\\n  )\\n)\\n"}, "state_not_equals": {"message": "${service} has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (not (state \\"${state}\\")))\\n    $node_policy_events)\\n"}}, "policies": {"http_web_server": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "vm": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}]}, "workflows": {"install": "define initialize_nodes\\n\\n    log message: \'Reloading policies\'\\n    event event: { \\"stage\\" => \\"Initializing monitoring policies\\" }\\n    reload_riemann_config app_id: \'${plan.name}\',\\n                          policies: \'$plan.policies\',\\n                          rules: \'$plan.rules\',\\n                          policies_events: \'$plan.policies_events\'\\n\\n    log message: \'processing nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${f:node}\'\\n        iterator on: \'$f:node.relationships\', to_v: \'relationship\'\\n            log message: \'waiting for node: ${node.id} relationship: ${v:relationship}\'\\n            state action: \'wait\', node_id: \'${v:relationship.target_id}\', reachable: \'true\'\\n        unset \'v:relationship\'\\n\\n        event event: { \\"stage\\" => \\"Creating node\\" }\\n        log message: \'executing create workflow for node: ${node.id}\'\\n        set \'v:create\': \\"$f:node.workflows.create\\"\\n        create\\n        unset \'v:create\'\\n\\n        execute_relationships_workflow workflow: \'preconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Configuring node\\" }\\n        log message: \'executing configure workflow for node: ${node.id}\'\\n        set \'v:configure\': \\"$f:node.workflows.configure\\"\\n        configure\\n        unset \'v:configure\'\\n\\n        execute_relationships_workflow workflow: \'postconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Starting node\\" }\\n        log message: \'executing start workflow for node: ${node.id}\'\\n        set \'v:start\': \\"$f:node.workflows.start\\"\\n        start\\n        unset \'v:start\'\\n\\n        state node_id: \'${node.id}\', reachable: \'true\'\\n\\n        execute_relationships_workflow workflow: \'establish\'\\n", "uninstall": "define uninstalling_nodes\\n    log message: \'uninstalling nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${node.id}\'\\n        # wait for all dependents to be uninstalled first\\n        iterator on: \'$f:node.dependents\', to_v: \'dependent\'\\n            log message: \'waiting for node: ${node.id} dependent: ${v:dependent}\'\\n            state action: \'wait\', node_id: \'${v:dependent}\', reachable: \'false\'\\n        unset \'v:dependent\'\\n\\n        state action: \'get\', node_id: \'${node.id}\', to_f: \'node_reachable\'\\n        log message: \'node reachable state is: ${node_reachable}\'\\n        # we only call uninstall on reachable nodes\\n        sequence if: \'${node_reachable} == true\'\\n            event event: { \\"stage\\" => \\"Stop node\\" }\\n            log message: \'executing stop workflow for node: ${node.id}\'\\n            set \'v:stop\': \\"$f:node.workflows.stop\\"\\n            stop\\n            unset \'v:stop\'\\n\\n            execute_relationships_workflow workflow: \'unlink\'\\n\\n            event event: { \\"stage\\" => \\"Delete node\\" }\\n            log message: \'executing delete workflow for node: ${node.id}\'\\n            set \'v:delete\': \\"$f:node.workflows.delete\\"\\n            delete\\n            unset \'v:delete\'\\n\\n            state action: \'wait\', node_id: \'${node.id}\', reachable: \'false\'\\n\\n    #TODO when we support multi app deployment, remove relevant policies from riemann"}, "nodes": [{"operations": {"cloudify.interfaces.lifecycle.configure": {"operation": "tasks.configure", "plugin": "python_webserver_installer"}, "start": {"operation": "tasks.start", "plugin": "python_webserver_installer"}, "cloudify.interfaces.lifecycle.start": {"operation": "tasks.start", "plugin": "python_webserver_installer"}, "configure": {"operation": "tasks.configure", "plugin": "python_webserver_installer"}}, "relationships": [{"source_operations": {}, "target_operations": {}, "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_id": "vm", "state": "reachable", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "type": "cloudify.relationships.contained_in"}], "declared_type": "cloudify.types.web_server", "name": "http_web_server", "plugins": {"python_webserver_installer": {"url": "https://github.com/CloudifySource/cosmo-plugin-python-webserver/archive/develop.zip", "agent_plugin": "true", "name": "python_webserver_installer"}}, "id": "http_web_server", "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "workflows": {"start": "define node_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "host_id": "vm", "type": "web_server", "properties": {"port": 8080, "cloudify_runtime": {}}}, {"operations": {"cloudify.interfaces.lifecycle.start": {"operation": "tasks.start", "plugin": "openstack_host_provisioner"}, "cloudify.interfaces.worker_installer.start": {"operation": "tasks.start", "plugin": "worker_installer"}, "cloudify.interfaces.lifecycle.create": {"operation": "tasks.provision", "plugin": "openstack_host_provisioner"}, "get": {"operation": "tasks.get", "plugin": "kv_store"}, "create": {"operation": "tasks.provision", "plugin": "openstack_host_provisioner"}, "cloudify.interfaces.worker_installer.restart": {"operation": "tasks.restart", "plugin": "worker_installer"}, "cloudify.interfaces.kv_store.get": {"operation": "tasks.get", "plugin": "kv_store"}, "cloudify.interfaces.worker_installer.install": {"operation": "tasks.install", "plugin": "worker_installer"}, "put": {"operation": "tasks.put", "plugin": "kv_store"}, "cloudify.interfaces.plugin_installer.install": {"operation": "tasks.install", "plugin": "plugin_installer"}, "cloudify.interfaces.kv_store.put": {"operation": "tasks.put", "plugin": "kv_store"}, "restart": {"operation": "tasks.restart", "plugin": "worker_installer"}}, "declared_type": "cloudify.types.host", "name": "vm", "plugins_to_install": [{"url": "https://github.com/CloudifySource/cosmo-plugin-python-webserver/archive/develop.zip", "agent_plugin": "true", "name": "python_webserver_installer"}], "plugins": {"plugin_installer": {"url": "cloudify/poc/plugins/celery-worker-plugin-installer.zip", "agent_plugin": "true", "name": "plugin_installer"}, "kv_store": {"url": "cloudify/poc/plugins/kv_store.zip", "agent_plugin": "true", "name": "kv_store"}, "openstack_host_provisioner": {"url": "cloudify/plugins/vagrant-host-plugin.zip", "agent_plugin": "false", "name": "openstack_host_provisioner"}, "worker_installer": {"url": "cloudify/poc/plugins/celery-worker-installer.zip", "agent_plugin": "false", "name": "worker_installer"}}, "id": "vm", "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "workflows": {"start": "define host_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n    sequence if: \'${node.properties.install_agent} == true\'\\n        state action: \'wait\', node_id: \'${node.id}\', reachable: \'true\'\\n        log message: \'installing agent on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.install\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.start\'\\n        event event: { \\"stage\\" => \\"Installing plugins\\" }\\n        log message: \'installing plugins on host: ${node.id} - plugins: ${node.plugins_to_install}\'\\n        iterator on: \'$node.plugins_to_install\', to_v: \'plugin\'\\n            log message: \'installing plugin: ${v:plugin.name} on host: ${node.id}\'\\n            execute_operation operation: \'cloudify.interfaces.plugin_installer.install\', params: {\\n                plugin: {\\n                    name: \'${v:plugin.name}\',\\n                    url: \'${v:plugin.url}\'\\n                 }\\n            }\\n            log message: \'successfully installed plugin: ${v:plugin.name} on host: ${node.id}\'\\n        log message: \'restarting worker on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.restart\'\\n        execute_operation operation: \'cloudify.interfaces.kv_store.put\', params: {\\n            key: \\"agent plugins installed\\",\\n            value: true\\n        }\\n\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "host_id": "vm", "dependents": ["http_web_server"], "type": "openstack_host", "properties": {"nova_config": {"instance": {"key_name": "cloudify-agents-kp", "flavor": 101, "image": 67074, "name": "sanity_hello_world_vm1"}, "region": "az-3.region-a.geo-1"}, "install_agent": true, "cloudify_runtime": {}, "worker_config": {"port": 22, "key": "/home/ubuntu/.ssh/cloudify-agents-kp.pem", "user": "ubuntu"}}}]}}, {"updatedAt": "2014-02-13 13:00:04.430142", "id": "hello_world2_4", "createdAt": "2014-02-13 13:00:04.430142", "plan": {"relationships": {"cloudify.relationships.depends_on": {"source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.depends_on", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}}, "cloudify.relationships.connected_to": {"source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.connected_to", "derived_from": "cloudify.relationships.depends_on", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}}, "cloudify.relationships.contained_in": {"source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.contained_in", "derived_from": "cloudify.relationships.depends_on", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}}}, "policies_events": {"start_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(tag \\"reachable\\" index)\\n", "message": "start detection passed"}, "performance_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"performance\\"\\n                                    :state \\"\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "performance monitoring"}, "failure_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [ip-event (assoc evnt :host \\"$node_id\\"\\n                             :service \\"ip\\"\\n                             :state (get evnt :host)\\n                             :description \\"$event\\"\\n                             :tags [\\"cosmo\\"])]\\n      (call-rescue ip-event [index]))\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"reachable\\"\\n                                    :state \\"false\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "detected failure"}}, "name": "hello_world2_4", "rules": {"state_equals": {"message": "${service} state has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (state \\"${state}\\"))\\n    $node_policy_events)\\n"}, "metric_below": {"message": "metric ${service} has dropped below a threshold of ${metric}, with a value of #{metric.value}", "rule": "(by [:host :service]\\n  (changed\\n      (fn [e]\\n          (and\\n              (not (nil? (:metric e)))\\n              (< (:metric e) ${metric})\\n          )\\n      )\\n      {:init false}\\n      (where\\n          (and\\n              (service \\"${service}\\")\\n              (and\\n                  (not (nil? metric))\\n                  (< metric ${metric})\\n              )\\n          )\\n          $node_policy_events\\n      )\\n  )\\n)\\n"}, "state_not_equals": {"message": "${service} has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (not (state \\"${state}\\")))\\n    $node_policy_events)\\n"}}, "policies": {"http_web_server": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "vm": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}]}, "workflows": {"install": "define initialize_nodes\\n\\n    log message: \'Reloading policies\'\\n    event event: { \\"stage\\" => \\"Initializing monitoring policies\\" }\\n    reload_riemann_config app_id: \'${plan.name}\',\\n                          policies: \'$plan.policies\',\\n                          rules: \'$plan.rules\',\\n                          policies_events: \'$plan.policies_events\'\\n\\n    log message: \'processing nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${f:node}\'\\n        iterator on: \'$f:node.relationships\', to_v: \'relationship\'\\n            log message: \'waiting for node: ${node.id} relationship: ${v:relationship}\'\\n            state action: \'wait\', node_id: \'${v:relationship.target_id}\', reachable: \'true\'\\n        unset \'v:relationship\'\\n\\n        event event: { \\"stage\\" => \\"Creating node\\" }\\n        log message: \'executing create workflow for node: ${node.id}\'\\n        set \'v:create\': \\"$f:node.workflows.create\\"\\n        create\\n        unset \'v:create\'\\n\\n        execute_relationships_workflow workflow: \'preconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Configuring node\\" }\\n        log message: \'executing configure workflow for node: ${node.id}\'\\n        set \'v:configure\': \\"$f:node.workflows.configure\\"\\n        configure\\n        unset \'v:configure\'\\n\\n        execute_relationships_workflow workflow: \'postconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Starting node\\" }\\n        log message: \'executing start workflow for node: ${node.id}\'\\n        set \'v:start\': \\"$f:node.workflows.start\\"\\n        start\\n        unset \'v:start\'\\n\\n        state node_id: \'${node.id}\', reachable: \'true\'\\n\\n        execute_relationships_workflow workflow: \'establish\'\\n", "uninstall": "define uninstalling_nodes\\n    log message: \'uninstalling nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${node.id}\'\\n        # wait for all dependents to be uninstalled first\\n        iterator on: \'$f:node.dependents\', to_v: \'dependent\'\\n            log message: \'waiting for node: ${node.id} dependent: ${v:dependent}\'\\n            state action: \'wait\', node_id: \'${v:dependent}\', reachable: \'false\'\\n        unset \'v:dependent\'\\n\\n        state action: \'get\', node_id: \'${node.id}\', to_f: \'node_reachable\'\\n        log message: \'node reachable state is: ${node_reachable}\'\\n        # we only call uninstall on reachable nodes\\n        sequence if: \'${node_reachable} == true\'\\n            event event: { \\"stage\\" => \\"Stop node\\" }\\n            log message: \'executing stop workflow for node: ${node.id}\'\\n            set \'v:stop\': \\"$f:node.workflows.stop\\"\\n            stop\\n            unset \'v:stop\'\\n\\n            execute_relationships_workflow workflow: \'unlink\'\\n\\n            event event: { \\"stage\\" => \\"Delete node\\" }\\n            log message: \'executing delete workflow for node: ${node.id}\'\\n            set \'v:delete\': \\"$f:node.workflows.delete\\"\\n            delete\\n            unset \'v:delete\'\\n\\n            state action: \'wait\', node_id: \'${node.id}\', reachable: \'false\'\\n\\n    #TODO when we support multi app deployment, remove relevant policies from riemann"}, "nodes": [{"operations": {"cloudify.interfaces.lifecycle.configure": {"operation": "tasks.configure", "plugin": "python_webserver_installer"}, "start": {"operation": "tasks.start", "plugin": "python_webserver_installer"}, "cloudify.interfaces.lifecycle.start": {"operation": "tasks.start", "plugin": "python_webserver_installer"}, "configure": {"operation": "tasks.configure", "plugin": "python_webserver_installer"}}, "relationships": [{"source_operations": {}, "target_operations": {}, "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_id": "vm", "state": "reachable", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "type": "cloudify.relationships.contained_in"}], "declared_type": "cloudify.types.web_server", "name": "http_web_server", "workflows": {"start": "define node_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "properties": {"port": 8080, "cloudify_runtime": {}}, "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "plugins": {"python_webserver_installer": {"url": "https://github.com/CloudifySource/cosmo-plugin-python-webserver/archive/develop.zip", "agent_plugin": "true", "name": "python_webserver_installer"}}, "host_id": "vm", "type": "web_server", "id": "http_web_server"}, {"operations": {"cloudify.interfaces.worker_installer.start": {"operation": "tasks.start", "plugin": "worker_installer"}, "cloudify.interfaces.lifecycle.create": {"operation": "tasks.provision", "plugin": "openstack_host_provisioner"}, "get": {"operation": "tasks.get", "plugin": "kv_store"}, "create": {"operation": "tasks.provision", "plugin": "openstack_host_provisioner"}, "cloudify.interfaces.worker_installer.restart": {"operation": "tasks.restart", "plugin": "worker_installer"}, "put": {"operation": "tasks.put", "plugin": "kv_store"}, "cloudify.interfaces.kv_store.get": {"operation": "tasks.get", "plugin": "kv_store"}, "cloudify.interfaces.worker_installer.install": {"operation": "tasks.install", "plugin": "worker_installer"}, "cloudify.interfaces.lifecycle.start": {"operation": "tasks.start", "plugin": "openstack_host_provisioner"}, "cloudify.interfaces.plugin_installer.install": {"operation": "tasks.install", "plugin": "plugin_installer"}, "cloudify.interfaces.kv_store.put": {"operation": "tasks.put", "plugin": "kv_store"}, "restart": {"operation": "tasks.restart", "plugin": "worker_installer"}}, "declared_type": "cloudify.types.host", "name": "vm", "plugins_to_install": [{"url": "https://github.com/CloudifySource/cosmo-plugin-python-webserver/archive/develop.zip", "agent_plugin": "true", "name": "python_webserver_installer"}], "workflows": {"start": "define host_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n    sequence if: \'${node.properties.install_agent} == true\'\\n        state action: \'wait\', node_id: \'${node.id}\', reachable: \'true\'\\n        log message: \'installing agent on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.install\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.start\'\\n        event event: { \\"stage\\" => \\"Installing plugins\\" }\\n        log message: \'installing plugins on host: ${node.id} - plugins: ${node.plugins_to_install}\'\\n        iterator on: \'$node.plugins_to_install\', to_v: \'plugin\'\\n            log message: \'installing plugin: ${v:plugin.name} on host: ${node.id}\'\\n            execute_operation operation: \'cloudify.interfaces.plugin_installer.install\', params: {\\n                plugin: {\\n                    name: \'${v:plugin.name}\',\\n                    url: \'${v:plugin.url}\'\\n                 }\\n            }\\n            log message: \'successfully installed plugin: ${v:plugin.name} on host: ${node.id}\'\\n        log message: \'restarting worker on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.restart\'\\n        execute_operation operation: \'cloudify.interfaces.kv_store.put\', params: {\\n            key: \\"agent plugins installed\\",\\n            value: true\\n        }\\n\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "properties": {"nova_config": {"instance": {"key_name": "cloudify-agents-kp", "flavor": 101, "image": 67074, "name": "sanity_hello_world_vm1"}, "region": "az-2.region-a.geo-1"}, "install_agent": true, "worker_config": {"port": 22, "key": "/home/ubuntu/.ssh/cloudify-agents-kp.pem", "user": "ubuntu"}, "cloudify_runtime": {}}, "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "plugins": {"plugin_installer": {"url": "cloudify/poc/plugins/celery-worker-plugin-installer.zip", "agent_plugin": "true", "name": "plugin_installer"}, "kv_store": {"url": "cloudify/poc/plugins/kv_store.zip", "agent_plugin": "true", "name": "kv_store"}, "openstack_host_provisioner": {"url": "cloudify/plugins/vagrant-host-plugin.zip", "agent_plugin": "false", "name": "openstack_host_provisioner"}, "worker_installer": {"url": "cloudify/poc/plugins/celery-worker-installer.zip", "agent_plugin": "false", "name": "worker_installer"}}, "host_id": "vm", "dependents": ["http_web_server"], "type": "openstack_host", "id": "vm"}]}}, {"updatedAt": "2014-02-13 12:14:48.701862", "id": "neutron-test-everything", "createdAt": "2014-02-13 12:14:48.701862", "plan": {"relationships": {"cloudify.relationships.depends_on": {"workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.depends_on", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}}, "cloudify.relationships.contained_in": {"workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.contained_in", "derived_from": "cloudify.relationships.depends_on", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}}, "cloudify.relationships.connected_to": {"workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.connected_to", "derived_from": "cloudify.relationships.depends_on", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}}}, "policies_events": {"start_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(tag \\"reachable\\" index)\\n", "message": "start detection passed"}, "performance_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"performance\\"\\n                                    :state \\"\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "performance monitoring"}, "failure_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [ip-event (assoc evnt :host \\"$node_id\\"\\n                             :service \\"ip\\"\\n                             :state (get evnt :host)\\n                             :description \\"$event\\"\\n                             :tags [\\"cosmo\\"])]\\n      (call-rescue ip-event [index]))\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"reachable\\"\\n                                    :state \\"false\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "detected failure"}}, "name": "neutron-test-everything", "rules": {"state_equals": {"message": "${service} state has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (state \\"${state}\\"))\\n    $node_policy_events)\\n"}, "metric_below": {"message": "metric ${service} has dropped below a threshold of ${metric}, with a value of #{metric.value}", "rule": "(by [:host :service]\\n  (changed\\n      (fn [e]\\n          (and\\n              (not (nil? (:metric e)))\\n              (< (:metric e) ${metric})\\n          )\\n      )\\n      {:init false}\\n      (where\\n          (and\\n              (service \\"${service}\\")\\n              (and\\n                  (not (nil? metric))\\n                  (< metric ${metric})\\n              )\\n          )\\n          $node_policy_events\\n      )\\n  )\\n)\\n"}, "state_not_equals": {"message": "${service} has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (not (state \\"${state}\\")))\\n    $node_policy_events)\\n"}}, "policies": {"neutron_network": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "neutron_subnet": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}]}, "workflows": {"install": "define initialize_nodes\\n\\n    log message: \'Reloading policies\'\\n    event event: { \\"stage\\" => \\"Initializing monitoring policies\\" }\\n    reload_riemann_config app_id: \'${plan.name}\',\\n                          policies: \'$plan.policies\',\\n                          rules: \'$plan.rules\',\\n                          policies_events: \'$plan.policies_events\'\\n\\n    log message: \'processing nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${f:node}\'\\n        iterator on: \'$f:node.relationships\', to_v: \'relationship\'\\n            log message: \'waiting for node: ${node.id} relationship: ${v:relationship}\'\\n            state action: \'wait\', node_id: \'${v:relationship.target_id}\', reachable: \'true\'\\n        unset \'v:relationship\'\\n\\n        event event: { \\"stage\\" => \\"Creating node\\" }\\n        log message: \'executing create workflow for node: ${node.id}\'\\n        set \'v:create\': \\"$f:node.workflows.create\\"\\n        create\\n        unset \'v:create\'\\n\\n        execute_relationships_workflow workflow: \'preconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Configuring node\\" }\\n        log message: \'executing configure workflow for node: ${node.id}\'\\n        set \'v:configure\': \\"$f:node.workflows.configure\\"\\n        configure\\n        unset \'v:configure\'\\n\\n        execute_relationships_workflow workflow: \'postconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Starting node\\" }\\n        log message: \'executing start workflow for node: ${node.id}\'\\n        set \'v:start\': \\"$f:node.workflows.start\\"\\n        start\\n        unset \'v:start\'\\n\\n        state node_id: \'${node.id}\', reachable: \'true\'\\n\\n        execute_relationships_workflow workflow: \'establish\'\\n", "uninstall": "define uninstalling_nodes\\n    log message: \'uninstalling nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${node.id}\'\\n        # wait for all dependents to be uninstalled first\\n        iterator on: \'$f:node.dependents\', to_v: \'dependent\'\\n            log message: \'waiting for node: ${node.id} dependent: ${v:dependent}\'\\n            state action: \'wait\', node_id: \'${v:dependent}\', reachable: \'false\'\\n        unset \'v:dependent\'\\n\\n        state action: \'get\', node_id: \'${node.id}\', to_f: \'node_reachable\'\\n        log message: \'node reachable state is: ${node_reachable}\'\\n        # we only call uninstall on reachable nodes\\n        sequence if: \'${node_reachable} == true\'\\n            event event: { \\"stage\\" => \\"Stop node\\" }\\n            log message: \'executing stop workflow for node: ${node.id}\'\\n            set \'v:stop\': \\"$f:node.workflows.stop\\"\\n            stop\\n            unset \'v:stop\'\\n\\n            execute_relationships_workflow workflow: \'unlink\'\\n\\n            event event: { \\"stage\\" => \\"Delete node\\" }\\n            log message: \'executing delete workflow for node: ${node.id}\'\\n            set \'v:delete\': \\"$f:node.workflows.delete\\"\\n            delete\\n            unset \'v:delete\'\\n\\n            state action: \'wait\', node_id: \'${node.id}\', reachable: \'false\'\\n\\n    #TODO when we support multi app deployment, remove relevant policies from riemann"}, "nodes": [{"operations": {"create": {"operation": "network.create", "plugin": "cloudify.plugins.cloudify_plugin_openstack_neutron_provisioner"}, "cloudify.interfaces.lifecycle.create": {"operation": "network.create", "plugin": "cloudify.plugins.cloudify_plugin_openstack_neutron_provisioner"}}, "declared_type": "neutron_network", "name": "neutron_network", "plugins": {"cloudify.plugins.cloudify_plugin_openstack_neutron_provisioner": {"url": "https://github.com/Fewbytes/cosmo-plugin-openstack-neutron-provisioner/archive/master.zip", "agent_plugin": "false", "name": "cloudify.plugins.cloudify_plugin_openstack_neutron_provisioner"}}, "id": "neutron_network", "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "workflows": {"start": "define node_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "dependents": ["neutron_subnet"], "type": "neutron_network", "properties": {"network": {"name": "neutron_network_test"}, "cloudify_runtime": {}}}, {"operations": {"create": {"operation": "subnet.create", "plugin": "cloudify.plugins.cloudify_plugin_openstack_neutron_provisioner"}, "cloudify.interfaces.lifecycle.create": {"operation": "subnet.create", "plugin": "cloudify.plugins.cloudify_plugin_openstack_neutron_provisioner"}}, "relationships": [{"source_operations": {}, "target_operations": {}, "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_id": "neutron_network", "state": "reachable", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "type": "cloudify.relationships.contained_in"}], "declared_type": "neutron_subnet", "name": "neutron_subnet", "plugins": {"cloudify.plugins.cloudify_plugin_openstack_neutron_provisioner": {"url": "https://github.com/Fewbytes/cosmo-plugin-openstack-neutron-provisioner/archive/master.zip", "agent_plugin": "false", "name": "cloudify.plugins.cloudify_plugin_openstack_neutron_provisioner"}}, "id": "neutron_subnet", "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "workflows": {"start": "define node_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "type": "neutron_subnet", "properties": {"subnet": {"ip_version": 4, "cidr": "10.10.10.0/24", "name": "neutron_subnet_test"}, "cloudify_runtime": {}}}]}}, {"updatedAt": "2014-02-13 13:15:31.107692", "id": "hello_world_1392297372.47", "createdAt": "2014-02-13 13:15:31.107692", "plan": {"relationships": {"cloudify.relationships.depends_on": {"workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.depends_on", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}}, "cloudify.relationships.contained_in": {"workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.contained_in", "derived_from": "cloudify.relationships.depends_on", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}}, "cloudify.relationships.connected_to": {"workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.connected_to", "derived_from": "cloudify.relationships.depends_on", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}}}, "policies_events": {"start_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(tag \\"reachable\\" index)\\n", "message": "start detection passed"}, "performance_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"performance\\"\\n                                    :state \\"\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "performance monitoring"}, "failure_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [ip-event (assoc evnt :host \\"$node_id\\"\\n                             :service \\"ip\\"\\n                             :state (get evnt :host)\\n                             :description \\"$event\\"\\n                             :tags [\\"cosmo\\"])]\\n      (call-rescue ip-event [index]))\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"reachable\\"\\n                                    :state \\"false\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "detected failure"}}, "name": "hello_world_1392297372.47", "rules": {"state_equals": {"message": "${service} state has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (state \\"${state}\\"))\\n    $node_policy_events)\\n"}, "metric_below": {"message": "metric ${service} has dropped below a threshold of ${metric}, with a value of #{metric.value}", "rule": "(by [:host :service]\\n  (changed\\n      (fn [e]\\n          (and\\n              (not (nil? (:metric e)))\\n              (< (:metric e) ${metric})\\n          )\\n      )\\n      {:init false}\\n      (where\\n          (and\\n              (service \\"${service}\\")\\n              (and\\n                  (not (nil? metric))\\n                  (< metric ${metric})\\n              )\\n          )\\n          $node_policy_events\\n      )\\n  )\\n)\\n"}, "state_not_equals": {"message": "${service} has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (not (state \\"${state}\\")))\\n    $node_policy_events)\\n"}}, "policies": {"http_web_server": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "vm": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}]}, "workflows": {"install": "define initialize_nodes\\n\\n    log message: \'Reloading policies\'\\n    event event: { \\"stage\\" => \\"Initializing monitoring policies\\" }\\n    reload_riemann_config app_id: \'${plan.name}\',\\n                          policies: \'$plan.policies\',\\n                          rules: \'$plan.rules\',\\n                          policies_events: \'$plan.policies_events\'\\n\\n    log message: \'processing nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${f:node}\'\\n        iterator on: \'$f:node.relationships\', to_v: \'relationship\'\\n            log message: \'waiting for node: ${node.id} relationship: ${v:relationship}\'\\n            state action: \'wait\', node_id: \'${v:relationship.target_id}\', reachable: \'true\'\\n        unset \'v:relationship\'\\n\\n        event event: { \\"stage\\" => \\"Creating node\\" }\\n        log message: \'executing create workflow for node: ${node.id}\'\\n        set \'v:create\': \\"$f:node.workflows.create\\"\\n        create\\n        unset \'v:create\'\\n\\n        execute_relationships_workflow workflow: \'preconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Configuring node\\" }\\n        log message: \'executing configure workflow for node: ${node.id}\'\\n        set \'v:configure\': \\"$f:node.workflows.configure\\"\\n        configure\\n        unset \'v:configure\'\\n\\n        execute_relationships_workflow workflow: \'postconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Starting node\\" }\\n        log message: \'executing start workflow for node: ${node.id}\'\\n        set \'v:start\': \\"$f:node.workflows.start\\"\\n        start\\n        unset \'v:start\'\\n\\n        state node_id: \'${node.id}\', reachable: \'true\'\\n\\n        execute_relationships_workflow workflow: \'establish\'\\n", "uninstall": "define uninstalling_nodes\\n    log message: \'uninstalling nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${node.id}\'\\n        # wait for all dependents to be uninstalled first\\n        iterator on: \'$f:node.dependents\', to_v: \'dependent\'\\n            log message: \'waiting for node: ${node.id} dependent: ${v:dependent}\'\\n            state action: \'wait\', node_id: \'${v:dependent}\', reachable: \'false\'\\n        unset \'v:dependent\'\\n\\n        state action: \'get\', node_id: \'${node.id}\', to_f: \'node_reachable\'\\n        log message: \'node reachable state is: ${node_reachable}\'\\n        # we only call uninstall on reachable nodes\\n        sequence if: \'${node_reachable} == true\'\\n            event event: { \\"stage\\" => \\"Stop node\\" }\\n            log message: \'executing stop workflow for node: ${node.id}\'\\n            set \'v:stop\': \\"$f:node.workflows.stop\\"\\n            stop\\n            unset \'v:stop\'\\n\\n            execute_relationships_workflow workflow: \'unlink\'\\n\\n            event event: { \\"stage\\" => \\"Delete node\\" }\\n            log message: \'executing delete workflow for node: ${node.id}\'\\n            set \'v:delete\': \\"$f:node.workflows.delete\\"\\n            delete\\n            unset \'v:delete\'\\n\\n            state action: \'wait\', node_id: \'${node.id}\', reachable: \'false\'\\n\\n    #TODO when we support multi app deployment, remove relevant policies from riemann"}, "nodes": [{"operations": {"cloudify.interfaces.lifecycle.configure": {"operation": "tasks.configure", "plugin": "python_webserver_installer"}, "start": {"operation": "tasks.start", "plugin": "python_webserver_installer"}, "cloudify.interfaces.lifecycle.start": {"operation": "tasks.start", "plugin": "python_webserver_installer"}, "configure": {"operation": "tasks.configure", "plugin": "python_webserver_installer"}}, "relationships": [{"source_operations": {}, "target_operations": {}, "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_id": "vm", "state": "reachable", "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "type": "cloudify.relationships.contained_in"}], "declared_type": "cloudify.types.web_server", "name": "http_web_server", "plugins": {"python_webserver_installer": {"url": "https://github.com/CloudifySource/cosmo-plugin-python-webserver/archive/develop.zip", "agent_plugin": "true", "name": "python_webserver_installer"}}, "id": "http_web_server", "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "workflows": {"start": "define node_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "host_id": "vm", "type": "web_server", "properties": {"port": 8080, "cloudify_runtime": {}}}, {"operations": {"cloudify.interfaces.lifecycle.start": {"operation": "tasks.start", "plugin": "openstack_host_provisioner"}, "cloudify.interfaces.worker_installer.start": {"operation": "tasks.start", "plugin": "worker_installer"}, "cloudify.interfaces.lifecycle.create": {"operation": "tasks.provision", "plugin": "openstack_host_provisioner"}, "get": {"operation": "tasks.get", "plugin": "kv_store"}, "create": {"operation": "tasks.provision", "plugin": "openstack_host_provisioner"}, "cloudify.interfaces.worker_installer.restart": {"operation": "tasks.restart", "plugin": "worker_installer"}, "cloudify.interfaces.kv_store.get": {"operation": "tasks.get", "plugin": "kv_store"}, "cloudify.interfaces.worker_installer.install": {"operation": "tasks.install", "plugin": "worker_installer"}, "put": {"operation": "tasks.put", "plugin": "kv_store"}, "cloudify.interfaces.plugin_installer.install": {"operation": "tasks.install", "plugin": "plugin_installer"}, "cloudify.interfaces.kv_store.put": {"operation": "tasks.put", "plugin": "kv_store"}, "restart": {"operation": "tasks.restart", "plugin": "worker_installer"}}, "declared_type": "cloudify.types.host", "name": "vm", "plugins_to_install": [{"url": "https://github.com/CloudifySource/cosmo-plugin-python-webserver/archive/develop.zip", "agent_plugin": "true", "name": "python_webserver_installer"}], "plugins": {"plugin_installer": {"url": "cloudify/poc/plugins/celery-worker-plugin-installer.zip", "agent_plugin": "true", "name": "plugin_installer"}, "kv_store": {"url": "cloudify/poc/plugins/kv_store.zip", "agent_plugin": "true", "name": "kv_store"}, "openstack_host_provisioner": {"url": "cloudify/plugins/vagrant-host-plugin.zip", "agent_plugin": "false", "name": "openstack_host_provisioner"}, "worker_installer": {"url": "cloudify/poc/plugins/celery-worker-installer.zip", "agent_plugin": "false", "name": "worker_installer"}}, "id": "vm", "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "workflows": {"start": "define host_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n    sequence if: \'${node.properties.install_agent} == true\'\\n        state action: \'wait\', node_id: \'${node.id}\', reachable: \'true\'\\n        log message: \'installing agent on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.install\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.start\'\\n        event event: { \\"stage\\" => \\"Installing plugins\\" }\\n        log message: \'installing plugins on host: ${node.id} - plugins: ${node.plugins_to_install}\'\\n        iterator on: \'$node.plugins_to_install\', to_v: \'plugin\'\\n            log message: \'installing plugin: ${v:plugin.name} on host: ${node.id}\'\\n            execute_operation operation: \'cloudify.interfaces.plugin_installer.install\', params: {\\n                plugin: {\\n                    name: \'${v:plugin.name}\',\\n                    url: \'${v:plugin.url}\'\\n                 }\\n            }\\n            log message: \'successfully installed plugin: ${v:plugin.name} on host: ${node.id}\'\\n        log message: \'restarting worker on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.restart\'\\n        execute_operation operation: \'cloudify.interfaces.kv_store.put\', params: {\\n            key: \\"agent plugins installed\\",\\n            value: true\\n        }\\n\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "host_id": "vm", "dependents": ["http_web_server"], "type": "openstack_host", "properties": {"nova_config": {"instance": {"key_name": "cloudify-agents-kp", "flavor": 101, "image": 67074, "name": "dank_hello_world_vm"}, "region": "az-3.region-a.geo-1"}, "install_agent": true, "cloudify_runtime": {}, "worker_config": {"port": 22, "key": "~/.ssh/cloudify-agents-kp.pem", "user": "ubuntu"}}}]}}, {"updatedAt": "2014-02-13 13:39:58.195501", "id": "hello_world_1392298834.39", "createdAt": "2014-02-13 13:39:58.195501", "plan": {"relationships": {"cloudify.relationships.depends_on": {"source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.depends_on", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}}, "cloudify.relationships.connected_to": {"source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.connected_to", "derived_from": "cloudify.relationships.depends_on", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}}, "cloudify.relationships.contained_in": {"source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.contained_in", "derived_from": "cloudify.relationships.depends_on", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}}}, "policies_events": {"start_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(tag \\"reachable\\" index)\\n", "message": "start detection passed"}, "performance_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"performance\\"\\n                                    :state \\"\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "performance monitoring"}, "failure_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [ip-event (assoc evnt :host \\"$node_id\\"\\n                             :service \\"ip\\"\\n                             :state (get evnt :host)\\n                             :description \\"$event\\"\\n                             :tags [\\"cosmo\\"])]\\n      (call-rescue ip-event [index]))\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"reachable\\"\\n                                    :state \\"false\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "detected failure"}}, "name": "hello_world_1392298834.39", "rules": {"state_equals": {"message": "${service} state has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (state \\"${state}\\"))\\n    $node_policy_events)\\n"}, "metric_below": {"message": "metric ${service} has dropped below a threshold of ${metric}, with a value of #{metric.value}", "rule": "(by [:host :service]\\n  (changed\\n      (fn [e]\\n          (and\\n              (not (nil? (:metric e)))\\n              (< (:metric e) ${metric})\\n          )\\n      )\\n      {:init false}\\n      (where\\n          (and\\n              (service \\"${service}\\")\\n              (and\\n                  (not (nil? metric))\\n                  (< metric ${metric})\\n              )\\n          )\\n          $node_policy_events\\n      )\\n  )\\n)\\n"}, "state_not_equals": {"message": "${service} has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (not (state \\"${state}\\")))\\n    $node_policy_events)\\n"}}, "policies": {"http_web_server": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "vm": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}]}, "workflows": {"install": "define initialize_nodes\\n\\n    log message: \'Reloading policies\'\\n    event event: { \\"stage\\" => \\"Initializing monitoring policies\\" }\\n    reload_riemann_config app_id: \'${plan.name}\',\\n                          policies: \'$plan.policies\',\\n                          rules: \'$plan.rules\',\\n                          policies_events: \'$plan.policies_events\'\\n\\n    log message: \'processing nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${f:node}\'\\n        iterator on: \'$f:node.relationships\', to_v: \'relationship\'\\n            log message: \'waiting for node: ${node.id} relationship: ${v:relationship}\'\\n            state action: \'wait\', node_id: \'${v:relationship.target_id}\', reachable: \'true\'\\n        unset \'v:relationship\'\\n\\n        event event: { \\"stage\\" => \\"Creating node\\" }\\n        log message: \'executing create workflow for node: ${node.id}\'\\n        set \'v:create\': \\"$f:node.workflows.create\\"\\n        create\\n        unset \'v:create\'\\n\\n        execute_relationships_workflow workflow: \'preconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Configuring node\\" }\\n        log message: \'executing configure workflow for node: ${node.id}\'\\n        set \'v:configure\': \\"$f:node.workflows.configure\\"\\n        configure\\n        unset \'v:configure\'\\n\\n        execute_relationships_workflow workflow: \'postconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Starting node\\" }\\n        log message: \'executing start workflow for node: ${node.id}\'\\n        set \'v:start\': \\"$f:node.workflows.start\\"\\n        start\\n        unset \'v:start\'\\n\\n        state node_id: \'${node.id}\', reachable: \'true\'\\n\\n        execute_relationships_workflow workflow: \'establish\'\\n", "uninstall": "define uninstalling_nodes\\n    log message: \'uninstalling nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${node.id}\'\\n        # wait for all dependents to be uninstalled first\\n        iterator on: \'$f:node.dependents\', to_v: \'dependent\'\\n            log message: \'waiting for node: ${node.id} dependent: ${v:dependent}\'\\n            state action: \'wait\', node_id: \'${v:dependent}\', reachable: \'false\'\\n        unset \'v:dependent\'\\n\\n        state action: \'get\', node_id: \'${node.id}\', to_f: \'node_reachable\'\\n        log message: \'node reachable state is: ${node_reachable}\'\\n        # we only call uninstall on reachable nodes\\n        sequence if: \'${node_reachable} == true\'\\n            event event: { \\"stage\\" => \\"Stop node\\" }\\n            log message: \'executing stop workflow for node: ${node.id}\'\\n            set \'v:stop\': \\"$f:node.workflows.stop\\"\\n            stop\\n            unset \'v:stop\'\\n\\n            execute_relationships_workflow workflow: \'unlink\'\\n\\n            event event: { \\"stage\\" => \\"Delete node\\" }\\n            log message: \'executing delete workflow for node: ${node.id}\'\\n            set \'v:delete\': \\"$f:node.workflows.delete\\"\\n            delete\\n            unset \'v:delete\'\\n\\n            state action: \'wait\', node_id: \'${node.id}\', reachable: \'false\'\\n\\n    #TODO when we support multi app deployment, remove relevant policies from riemann"}, "nodes": [{"operations": {"cloudify.interfaces.lifecycle.configure": {"operation": "tasks.configure", "plugin": "python_webserver_installer"}, "start": {"operation": "tasks.start", "plugin": "python_webserver_installer"}, "cloudify.interfaces.lifecycle.start": {"operation": "tasks.start", "plugin": "python_webserver_installer"}, "configure": {"operation": "tasks.configure", "plugin": "python_webserver_installer"}}, "relationships": [{"source_operations": {}, "target_operations": {}, "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_id": "vm", "state": "reachable", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "type": "cloudify.relationships.contained_in"}], "declared_type": "cloudify.types.web_server", "name": "http_web_server", "workflows": {"start": "define node_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "properties": {"port": 8080, "cloudify_runtime": {}}, "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "plugins": {"python_webserver_installer": {"url": "https://github.com/CloudifySource/cosmo-plugin-python-webserver/archive/develop.zip", "agent_plugin": "true", "name": "python_webserver_installer"}}, "host_id": "vm", "type": "web_server", "id": "http_web_server"}, {"operations": {"cloudify.interfaces.worker_installer.start": {"operation": "tasks.start", "plugin": "worker_installer"}, "cloudify.interfaces.lifecycle.create": {"operation": "tasks.provision", "plugin": "openstack_host_provisioner"}, "get": {"operation": "tasks.get", "plugin": "kv_store"}, "create": {"operation": "tasks.provision", "plugin": "openstack_host_provisioner"}, "cloudify.interfaces.worker_installer.restart": {"operation": "tasks.restart", "plugin": "worker_installer"}, "put": {"operation": "tasks.put", "plugin": "kv_store"}, "cloudify.interfaces.kv_store.get": {"operation": "tasks.get", "plugin": "kv_store"}, "cloudify.interfaces.worker_installer.install": {"operation": "tasks.install", "plugin": "worker_installer"}, "cloudify.interfaces.lifecycle.start": {"operation": "tasks.start", "plugin": "openstack_host_provisioner"}, "cloudify.interfaces.plugin_installer.install": {"operation": "tasks.install", "plugin": "plugin_installer"}, "cloudify.interfaces.kv_store.put": {"operation": "tasks.put", "plugin": "kv_store"}, "restart": {"operation": "tasks.restart", "plugin": "worker_installer"}}, "declared_type": "cloudify.types.host", "name": "vm", "plugins_to_install": [{"url": "https://github.com/CloudifySource/cosmo-plugin-python-webserver/archive/develop.zip", "agent_plugin": "true", "name": "python_webserver_installer"}], "workflows": {"start": "define host_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n    sequence if: \'${node.properties.install_agent} == true\'\\n        state action: \'wait\', node_id: \'${node.id}\', reachable: \'true\'\\n        log message: \'installing agent on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.install\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.start\'\\n        event event: { \\"stage\\" => \\"Installing plugins\\" }\\n        log message: \'installing plugins on host: ${node.id} - plugins: ${node.plugins_to_install}\'\\n        iterator on: \'$node.plugins_to_install\', to_v: \'plugin\'\\n            log message: \'installing plugin: ${v:plugin.name} on host: ${node.id}\'\\n            execute_operation operation: \'cloudify.interfaces.plugin_installer.install\', params: {\\n                plugin: {\\n                    name: \'${v:plugin.name}\',\\n                    url: \'${v:plugin.url}\'\\n                 }\\n            }\\n            log message: \'successfully installed plugin: ${v:plugin.name} on host: ${node.id}\'\\n        log message: \'restarting worker on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.restart\'\\n        execute_operation operation: \'cloudify.interfaces.kv_store.put\', params: {\\n            key: \\"agent plugins installed\\",\\n            value: true\\n        }\\n\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "properties": {"nova_config": {"instance": {"key_name": "cloudify-agents-kp", "flavor": 101, "image": 48335, "name": "dank_hello_world_vm"}, "region": "az-3.region-a.geo-1"}, "install_agent": true, "worker_config": {"port": 22, "key": "~/.ssh/cloudify-agents-kp.pem", "user": "ubuntu"}, "cloudify_runtime": {}}, "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "plugins": {"plugin_installer": {"url": "cloudify/poc/plugins/celery-worker-plugin-installer.zip", "agent_plugin": "true", "name": "plugin_installer"}, "kv_store": {"url": "cloudify/poc/plugins/kv_store.zip", "agent_plugin": "true", "name": "kv_store"}, "openstack_host_provisioner": {"url": "cloudify/plugins/vagrant-host-plugin.zip", "agent_plugin": "false", "name": "openstack_host_provisioner"}, "worker_installer": {"url": "cloudify/poc/plugins/celery-worker-installer.zip", "agent_plugin": "false", "name": "worker_installer"}}, "host_id": "vm", "dependents": ["http_web_server"], "type": "openstack_host", "id": "vm"}]}}, {"updatedAt": "2014-02-13 13:36:28.602358", "id": "hello_world_1392298627.28", "createdAt": "2014-02-13 13:36:28.602358", "plan": {"relationships": {"cloudify.relationships.depends_on": {"source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.depends_on", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}}, "cloudify.relationships.connected_to": {"source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.connected_to", "derived_from": "cloudify.relationships.depends_on", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}}, "cloudify.relationships.contained_in": {"source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.contained_in", "derived_from": "cloudify.relationships.depends_on", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}}}, "policies_events": {"start_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(tag \\"reachable\\" index)\\n", "message": "start detection passed"}, "performance_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"performance\\"\\n                                    :state \\"\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "performance monitoring"}, "failure_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [ip-event (assoc evnt :host \\"$node_id\\"\\n                             :service \\"ip\\"\\n                             :state (get evnt :host)\\n                             :description \\"$event\\"\\n                             :tags [\\"cosmo\\"])]\\n      (call-rescue ip-event [index]))\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"reachable\\"\\n                                    :state \\"false\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "detected failure"}}, "name": "hello_world_1392298627.28", "rules": {"state_equals": {"message": "${service} state has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (state \\"${state}\\"))\\n    $node_policy_events)\\n"}, "metric_below": {"message": "metric ${service} has dropped below a threshold of ${metric}, with a value of #{metric.value}", "rule": "(by [:host :service]\\n  (changed\\n      (fn [e]\\n          (and\\n              (not (nil? (:metric e)))\\n              (< (:metric e) ${metric})\\n          )\\n      )\\n      {:init false}\\n      (where\\n          (and\\n              (service \\"${service}\\")\\n              (and\\n                  (not (nil? metric))\\n                  (< metric ${metric})\\n              )\\n          )\\n          $node_policy_events\\n      )\\n  )\\n)\\n"}, "state_not_equals": {"message": "${service} has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (not (state \\"${state}\\")))\\n    $node_policy_events)\\n"}}, "policies": {"http_web_server": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "vm": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}]}, "workflows": {"install": "define initialize_nodes\\n\\n    log message: \'Reloading policies\'\\n    event event: { \\"stage\\" => \\"Initializing monitoring policies\\" }\\n    reload_riemann_config app_id: \'${plan.name}\',\\n                          policies: \'$plan.policies\',\\n                          rules: \'$plan.rules\',\\n                          policies_events: \'$plan.policies_events\'\\n\\n    log message: \'processing nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${f:node}\'\\n        iterator on: \'$f:node.relationships\', to_v: \'relationship\'\\n            log message: \'waiting for node: ${node.id} relationship: ${v:relationship}\'\\n            state action: \'wait\', node_id: \'${v:relationship.target_id}\', reachable: \'true\'\\n        unset \'v:relationship\'\\n\\n        event event: { \\"stage\\" => \\"Creating node\\" }\\n        log message: \'executing create workflow for node: ${node.id}\'\\n        set \'v:create\': \\"$f:node.workflows.create\\"\\n        create\\n        unset \'v:create\'\\n\\n        execute_relationships_workflow workflow: \'preconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Configuring node\\" }\\n        log message: \'executing configure workflow for node: ${node.id}\'\\n        set \'v:configure\': \\"$f:node.workflows.configure\\"\\n        configure\\n        unset \'v:configure\'\\n\\n        execute_relationships_workflow workflow: \'postconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Starting node\\" }\\n        log message: \'executing start workflow for node: ${node.id}\'\\n        set \'v:start\': \\"$f:node.workflows.start\\"\\n        start\\n        unset \'v:start\'\\n\\n        state node_id: \'${node.id}\', reachable: \'true\'\\n\\n        execute_relationships_workflow workflow: \'establish\'\\n", "uninstall": "define uninstalling_nodes\\n    log message: \'uninstalling nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${node.id}\'\\n        # wait for all dependents to be uninstalled first\\n        iterator on: \'$f:node.dependents\', to_v: \'dependent\'\\n            log message: \'waiting for node: ${node.id} dependent: ${v:dependent}\'\\n            state action: \'wait\', node_id: \'${v:dependent}\', reachable: \'false\'\\n        unset \'v:dependent\'\\n\\n        state action: \'get\', node_id: \'${node.id}\', to_f: \'node_reachable\'\\n        log message: \'node reachable state is: ${node_reachable}\'\\n        # we only call uninstall on reachable nodes\\n        sequence if: \'${node_reachable} == true\'\\n            event event: { \\"stage\\" => \\"Stop node\\" }\\n            log message: \'executing stop workflow for node: ${node.id}\'\\n            set \'v:stop\': \\"$f:node.workflows.stop\\"\\n            stop\\n            unset \'v:stop\'\\n\\n            execute_relationships_workflow workflow: \'unlink\'\\n\\n            event event: { \\"stage\\" => \\"Delete node\\" }\\n            log message: \'executing delete workflow for node: ${node.id}\'\\n            set \'v:delete\': \\"$f:node.workflows.delete\\"\\n            delete\\n            unset \'v:delete\'\\n\\n            state action: \'wait\', node_id: \'${node.id}\', reachable: \'false\'\\n\\n    #TODO when we support multi app deployment, remove relevant policies from riemann"}, "nodes": [{"operations": {"cloudify.interfaces.lifecycle.configure": {"operation": "tasks.configure", "plugin": "python_webserver_installer"}, "start": {"operation": "tasks.start", "plugin": "python_webserver_installer"}, "cloudify.interfaces.lifecycle.start": {"operation": "tasks.start", "plugin": "python_webserver_installer"}, "configure": {"operation": "tasks.configure", "plugin": "python_webserver_installer"}}, "relationships": [{"source_operations": {}, "target_operations": {}, "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_id": "vm", "state": "reachable", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "type": "cloudify.relationships.contained_in"}], "declared_type": "cloudify.types.web_server", "name": "http_web_server", "workflows": {"start": "define node_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "properties": {"port": 8080, "cloudify_runtime": {}}, "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "plugins": {"python_webserver_installer": {"url": "https://github.com/CloudifySource/cosmo-plugin-python-webserver/archive/develop.zip", "agent_plugin": "true", "name": "python_webserver_installer"}}, "host_id": "vm", "type": "web_server", "id": "http_web_server"}, {"operations": {"cloudify.interfaces.worker_installer.start": {"operation": "tasks.start", "plugin": "worker_installer"}, "cloudify.interfaces.lifecycle.create": {"operation": "tasks.provision", "plugin": "openstack_host_provisioner"}, "get": {"operation": "tasks.get", "plugin": "kv_store"}, "create": {"operation": "tasks.provision", "plugin": "openstack_host_provisioner"}, "cloudify.interfaces.worker_installer.restart": {"operation": "tasks.restart", "plugin": "worker_installer"}, "put": {"operation": "tasks.put", "plugin": "kv_store"}, "cloudify.interfaces.kv_store.get": {"operation": "tasks.get", "plugin": "kv_store"}, "cloudify.interfaces.worker_installer.install": {"operation": "tasks.install", "plugin": "worker_installer"}, "cloudify.interfaces.lifecycle.start": {"operation": "tasks.start", "plugin": "openstack_host_provisioner"}, "cloudify.interfaces.plugin_installer.install": {"operation": "tasks.install", "plugin": "plugin_installer"}, "cloudify.interfaces.kv_store.put": {"operation": "tasks.put", "plugin": "kv_store"}, "restart": {"operation": "tasks.restart", "plugin": "worker_installer"}}, "declared_type": "cloudify.types.host", "name": "vm", "plugins_to_install": [{"url": "https://github.com/CloudifySource/cosmo-plugin-python-webserver/archive/develop.zip", "agent_plugin": "true", "name": "python_webserver_installer"}], "workflows": {"start": "define host_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n    sequence if: \'${node.properties.install_agent} == true\'\\n        state action: \'wait\', node_id: \'${node.id}\', reachable: \'true\'\\n        log message: \'installing agent on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.install\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.start\'\\n        event event: { \\"stage\\" => \\"Installing plugins\\" }\\n        log message: \'installing plugins on host: ${node.id} - plugins: ${node.plugins_to_install}\'\\n        iterator on: \'$node.plugins_to_install\', to_v: \'plugin\'\\n            log message: \'installing plugin: ${v:plugin.name} on host: ${node.id}\'\\n            execute_operation operation: \'cloudify.interfaces.plugin_installer.install\', params: {\\n                plugin: {\\n                    name: \'${v:plugin.name}\',\\n                    url: \'${v:plugin.url}\'\\n                 }\\n            }\\n            log message: \'successfully installed plugin: ${v:plugin.name} on host: ${node.id}\'\\n        log message: \'restarting worker on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.restart\'\\n        execute_operation operation: \'cloudify.interfaces.kv_store.put\', params: {\\n            key: \\"agent plugins installed\\",\\n            value: true\\n        }\\n\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "properties": {"nova_config": {"instance": {"key_name": "cloudify-agents-kp", "flavor": 101, "image": 48335, "name": "dank_hello_world_vm"}, "region": "az-3.region-a.geo-1"}, "install_agent": true, "worker_config": {"port": 22, "key": "~/.ssh/cloudify-agents-kp.pem", "user": "ubuntu"}, "cloudify_runtime": {}}, "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "plugins": {"plugin_installer": {"url": "cloudify/poc/plugins/celery-worker-plugin-installer.zip", "agent_plugin": "true", "name": "plugin_installer"}, "kv_store": {"url": "cloudify/poc/plugins/kv_store.zip", "agent_plugin": "true", "name": "kv_store"}, "openstack_host_provisioner": {"url": "cloudify/plugins/vagrant-host-plugin.zip", "agent_plugin": "false", "name": "openstack_host_provisioner"}, "worker_installer": {"url": "cloudify/poc/plugins/celery-worker-installer.zip", "agent_plugin": "false", "name": "worker_installer"}}, "host_id": "vm", "dependents": ["http_web_server"], "type": "openstack_host", "id": "vm"}]}}]' ]
