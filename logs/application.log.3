<<<<<<< HEAD
[2014-02-11 10:25:50.696] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/events?from=0',
    method: 'GET' } ]
[2014-02-11 10:25:50.710] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/nodes',
    method: 'GET' } ]
[2014-02-11 10:25:50.888] [INFO] console - STATUS: 404
[2014-02-11 10:25:50.889] [INFO] server - [ 'Request done, data: ',
  '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\n' ]
[2014-02-11 10:25:51.109] [INFO] console - STATUS: 404
[2014-02-11 10:25:51.110] [INFO] server - [ 'Request done, data: ',
  '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\n' ]
[2014-02-11 10:25:51.137] [INFO] console - STATUS: 200
[2014-02-11 10:25:51.137] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "0c0a1f89-3117-4fc1-99e5-b893816b6b14", "nodes": [{"reachable": null, "id": "http_web_server_a9fb5"}, {"reachable": null, "id": "vm_ae895"}]}' ]
[2014-02-11 10:25:53.019] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/nodes',
    method: 'GET' } ]
[2014-02-11 10:25:53.456] [INFO] console - STATUS: 200
[2014-02-11 10:25:53.456] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "0c0a1f89-3117-4fc1-99e5-b893816b6b14", "nodes": [{"reachable": null, "id": "http_web_server_a9fb5"}, {"reachable": null, "id": "vm_ae895"}]}' ]
[2014-02-11 10:25:53.899] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/events?from=0',
    method: 'GET' } ]
[2014-02-11 10:25:54.115] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/events?from=0',
    method: 'GET' } ]
[2014-02-11 10:25:54.144] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/nodes',
    method: 'GET' } ]
[2014-02-11 10:25:54.330] [INFO] console - STATUS: 404
[2014-02-11 10:25:54.332] [INFO] server - [ 'Request done, data: ',
  '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\n' ]
[2014-02-11 10:25:54.533] [INFO] console - STATUS: 404
[2014-02-11 10:25:54.534] [INFO] server - [ 'Request done, data: ',
  '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\n' ]
[2014-02-11 10:25:54.572] [INFO] console - STATUS: 200
[2014-02-11 10:25:54.573] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "0c0a1f89-3117-4fc1-99e5-b893816b6b14", "nodes": [{"reachable": null, "id": "http_web_server_a9fb5"}, {"reachable": null, "id": "vm_ae895"}]}' ]
[2014-02-11 10:25:56.464] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/nodes',
    method: 'GET' } ]
[2014-02-11 10:25:56.993] [INFO] console - STATUS: 200
[2014-02-11 10:25:56.993] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "0c0a1f89-3117-4fc1-99e5-b893816b6b14", "nodes": [{"reachable": null, "id": "http_web_server_a9fb5"}, {"reachable": null, "id": "vm_ae895"}]}' ]
[2014-02-11 10:25:57.338] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/events?from=0',
    method: 'GET' } ]
[2014-02-11 10:25:57.541] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/events?from=0',
    method: 'GET' } ]
[2014-02-11 10:25:57.579] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/nodes',
    method: 'GET' } ]
[2014-02-11 10:25:57.756] [INFO] console - STATUS: 404
[2014-02-11 10:25:57.757] [INFO] server - [ 'Request done, data: ',
  '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\n' ]
[2014-02-11 10:25:57.961] [INFO] console - STATUS: 404
[2014-02-11 10:25:57.962] [INFO] server - [ 'Request done, data: ',
  '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\n' ]
[2014-02-11 10:25:58.017] [INFO] console - STATUS: 200
[2014-02-11 10:25:58.017] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "0c0a1f89-3117-4fc1-99e5-b893816b6b14", "nodes": [{"reachable": null, "id": "http_web_server_a9fb5"}, {"reachable": null, "id": "vm_ae895"}]}' ]
[2014-02-11 10:26:00.000] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/nodes',
    method: 'GET' } ]
[2014-02-11 10:26:00.453] [INFO] console - STATUS: 200
[2014-02-11 10:26:00.453] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "0c0a1f89-3117-4fc1-99e5-b893816b6b14", "nodes": [{"reachable": null, "id": "http_web_server_a9fb5"}, {"reachable": null, "id": "vm_ae895"}]}' ]
[2014-02-11 10:26:00.763] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/events?from=0',
    method: 'GET' } ]
[2014-02-11 10:26:00.970] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/events?from=0',
    method: 'GET' } ]
[2014-02-11 10:26:01.024] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/nodes',
    method: 'GET' } ]
[2014-02-11 10:26:01.184] [INFO] console - STATUS: 404
[2014-02-11 10:26:01.186] [INFO] server - [ 'Request done, data: ',
  '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\n' ]
[2014-02-11 10:26:01.387] [INFO] console - STATUS: 404
[2014-02-11 10:26:01.388] [INFO] server - [ 'Request done, data: ',
  '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\n' ]
[2014-02-11 10:26:01.454] [INFO] console - STATUS: 200
[2014-02-11 10:26:01.454] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "0c0a1f89-3117-4fc1-99e5-b893816b6b14", "nodes": [{"reachable": null, "id": "http_web_server_a9fb5"}, {"reachable": null, "id": "vm_ae895"}]}' ]
[2014-02-11 10:26:03.460] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/nodes',
    method: 'GET' } ]
[2014-02-11 10:26:03.890] [INFO] console - STATUS: 200
[2014-02-11 10:26:03.891] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "0c0a1f89-3117-4fc1-99e5-b893816b6b14", "nodes": [{"reachable": null, "id": "http_web_server_a9fb5"}, {"reachable": null, "id": "vm_ae895"}]}' ]
[2014-02-11 10:26:04.194] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/events?from=0',
    method: 'GET' } ]
[2014-02-11 10:26:04.396] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/events?from=0',
    method: 'GET' } ]
[2014-02-11 10:26:04.460] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/nodes',
    method: 'GET' } ]
[2014-02-11 10:26:04.620] [INFO] console - STATUS: 404
[2014-02-11 10:26:04.621] [INFO] server - [ 'Request done, data: ',
  '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\n' ]
[2014-02-11 10:26:04.813] [INFO] console - STATUS: 404
[2014-02-11 10:26:04.813] [INFO] server - [ 'Request done, data: ',
  '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\n' ]
[2014-02-11 10:26:04.891] [INFO] console - STATUS: 200
[2014-02-11 10:26:04.891] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "0c0a1f89-3117-4fc1-99e5-b893816b6b14", "nodes": [{"reachable": null, "id": "http_web_server_a9fb5"}, {"reachable": null, "id": "vm_ae895"}]}' ]
[2014-02-11 10:26:06.897] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/nodes',
    method: 'GET' } ]
[2014-02-11 10:26:07.335] [INFO] console - STATUS: 200
[2014-02-11 10:26:07.336] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "0c0a1f89-3117-4fc1-99e5-b893816b6b14", "nodes": [{"reachable": null, "id": "http_web_server_a9fb5"}, {"reachable": null, "id": "vm_ae895"}]}' ]
[2014-02-11 10:26:07.629] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/events?from=0',
    method: 'GET' } ]
[2014-02-11 10:26:07.819] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/events?from=0',
    method: 'GET' } ]
[2014-02-11 10:26:07.897] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/nodes',
    method: 'GET' } ]
[2014-02-11 10:26:08.066] [INFO] console - STATUS: 404
[2014-02-11 10:26:08.066] [INFO] server - [ 'Request done, data: ',
  '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\n' ]
[2014-02-11 10:26:08.233] [INFO] console - STATUS: 404
[2014-02-11 10:26:08.233] [INFO] server - [ 'Request done, data: ',
  '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\n' ]
[2014-02-11 10:26:08.326] [INFO] console - STATUS: 200
[2014-02-11 10:26:08.326] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "0c0a1f89-3117-4fc1-99e5-b893816b6b14", "nodes": [{"reachable": null, "id": "http_web_server_a9fb5"}, {"reachable": null, "id": "vm_ae895"}]}' ]
[2014-02-11 10:26:10.342] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/nodes',
    method: 'GET' } ]
[2014-02-11 10:26:10.791] [INFO] console - STATUS: 200
[2014-02-11 10:26:10.791] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "0c0a1f89-3117-4fc1-99e5-b893816b6b14", "nodes": [{"reachable": null, "id": "http_web_server_a9fb5"}, {"reachable": null, "id": "vm_ae895"}]}' ]
[2014-02-11 10:26:11.074] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/events?from=0',
    method: 'GET' } ]
[2014-02-11 10:26:11.242] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/events?from=0',
    method: 'GET' } ]
[2014-02-11 10:26:11.333] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/nodes',
    method: 'GET' } ]
[2014-02-11 10:26:11.492] [INFO] console - STATUS: 404
[2014-02-11 10:26:11.493] [INFO] server - [ 'Request done, data: ',
  '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\n' ]
[2014-02-11 10:26:11.660] [INFO] console - STATUS: 404
[2014-02-11 10:26:11.661] [INFO] server - [ 'Request done, data: ',
  '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\n' ]
[2014-02-11 10:26:11.759] [INFO] console - STATUS: 200
[2014-02-11 10:26:11.760] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "0c0a1f89-3117-4fc1-99e5-b893816b6b14", "nodes": [{"reachable": null, "id": "http_web_server_a9fb5"}, {"reachable": null, "id": "vm_ae895"}]}' ]
[2014-02-11 10:26:13.799] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/nodes',
    method: 'GET' } ]
[2014-02-11 10:26:14.331] [INFO] console - STATUS: 200
[2014-02-11 10:26:14.332] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "0c0a1f89-3117-4fc1-99e5-b893816b6b14", "nodes": [{"reachable": null, "id": "http_web_server_a9fb5"}, {"reachable": null, "id": "vm_ae895"}]}' ]
[2014-02-11 10:26:14.500] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/events?from=0',
    method: 'GET' } ]
[2014-02-11 10:26:14.668] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/events?from=0',
    method: 'GET' } ]
[2014-02-11 10:26:14.766] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/nodes',
    method: 'GET' } ]
[2014-02-11 10:26:14.912] [INFO] console - STATUS: 404
[2014-02-11 10:26:14.912] [INFO] server - [ 'Request done, data: ',
  '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\n' ]
[2014-02-11 10:26:15.082] [INFO] console - STATUS: 404
[2014-02-11 10:26:15.082] [INFO] server - [ 'Request done, data: ',
  '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\n' ]
[2014-02-11 10:26:15.195] [INFO] console - STATUS: 200
[2014-02-11 10:26:15.196] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "0c0a1f89-3117-4fc1-99e5-b893816b6b14", "nodes": [{"reachable": null, "id": "http_web_server_a9fb5"}, {"reachable": null, "id": "vm_ae895"}]}' ]
[2014-02-11 10:26:17.339] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/nodes',
    method: 'GET' } ]
[2014-02-11 10:26:17.781] [INFO] console - STATUS: 200
[2014-02-11 10:26:17.781] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "0c0a1f89-3117-4fc1-99e5-b893816b6b14", "nodes": [{"reachable": null, "id": "http_web_server_a9fb5"}, {"reachable": null, "id": "vm_ae895"}]}' ]
[2014-02-11 10:26:17.919] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/events?from=0',
    method: 'GET' } ]
[2014-02-11 10:26:18.088] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/events?from=0',
    method: 'GET' } ]
[2014-02-11 10:26:18.203] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/nodes',
    method: 'GET' } ]
[2014-02-11 10:26:18.336] [INFO] console - STATUS: 404
[2014-02-11 10:26:18.336] [INFO] server - [ 'Request done, data: ',
  '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\n' ]
[2014-02-11 10:26:18.500] [INFO] console - STATUS: 404
[2014-02-11 10:26:18.501] [INFO] server - [ 'Request done, data: ',
  '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\n' ]
[2014-02-11 10:26:18.630] [INFO] console - STATUS: 200
[2014-02-11 10:26:18.630] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "0c0a1f89-3117-4fc1-99e5-b893816b6b14", "nodes": [{"reachable": null, "id": "http_web_server_a9fb5"}, {"reachable": null, "id": "vm_ae895"}]}' ]
[2014-02-11 10:26:20.788] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/nodes',
    method: 'GET' } ]
[2014-02-11 10:26:21.331] [INFO] console - STATUS: 200
[2014-02-11 10:26:21.332] [INFO] server - [ 'Request done, data: ',
  '{"deploymentId": "0c0a1f89-3117-4fc1-99e5-b893816b6b14", "nodes": [{"reachable": null, "id": "http_web_server_a9fb5"}, {"reachable": null, "id": "vm_ae895"}]}' ]
[2014-02-11 10:26:21.344] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/events?from=0',
    method: 'GET' } ]
[2014-02-11 10:26:21.508] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/events?from=0',
    method: 'GET' } ]
[2014-02-11 10:26:21.637] [INFO] server - [ 'dispatching request ',
  { hostname: 'cosmo.gsdev.info',
    port: '8100',
    path: '/deployments/0c0a1f89-3117-4fc1-99e5-b893816b6b14/nodes',
    method: 'GET' } ]
[2014-02-11 10:26:21.845] [INFO] console - STATUS: 404
[2014-02-11 10:26:21.846] [INFO] server - [ 'Request done, data: ',
  '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\n' ]
[2014-02-11 10:26:21.925] [INFO] console - STATUS: 404
[2014-02-11 10:26:21.925] [INFO] server - [ 'Request done, data: ',
  '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\n' ]
=======
[2014-02-11 15:51:15.572] [INFO] console - STATUS: 200
[2014-02-11 15:51:15.946] [INFO] server - [ 'Request done, data: ',
  '{"updatedAt": "2014-02-11 13:42:30.070945", "id": "hello_world", "createdAt": "2014-02-11 13:42:30.070945", "plan": {"relationships": {"cloudify.relationships.depends_on": {"source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.depends_on", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}}, "cloudify.relationships.connected_to": {"source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.connected_to", "derived_from": "cloudify.relationships.depends_on", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}}, "cloudify.relationships.contained_in": {"source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.contained_in", "derived_from": "cloudify.relationships.depends_on", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}}}, "policies_events": {"start_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(tag \\"reachable\\" index)\\n", "message": "start detection passed"}, "performance_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"performance\\"\\n                                    :state \\"\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "performance monitoring"}, "failure_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [ip-event (assoc evnt :host \\"$node_id\\"\\n                             :service \\"ip\\"\\n                             :state (get evnt :host)\\n                             :description \\"$event\\"\\n                             :tags [\\"cosmo\\"])]\\n      (call-rescue ip-event [index]))\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"reachable\\"\\n                                    :state \\"false\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "detected failure"}}, "name": "hello_world", "rules": {"state_equals": {"message": "${service} state has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (state \\"${state}\\"))\\n    $node_policy_events)\\n"}, "metric_below": {"message": "metric ${service} has dropped below a threshold of ${metric}, with a value of #{metric.value}", "rule": "(by [:host :service]\\n  (changed\\n      (fn [e]\\n          (and\\n              (not (nil? (:metric e)))\\n              (< (:metric e) ${metric})\\n          )\\n      )\\n      {:init false}\\n      (where\\n          (and\\n              (service \\"${service}\\")\\n              (and\\n                  (not (nil? metric))\\n                  (< metric ${metric})\\n              )\\n          )\\n          $node_policy_events\\n      )\\n  )\\n)\\n"}, "state_not_equals": {"message": "${service} has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (not (state \\"${state}\\")))\\n    $node_policy_events)\\n"}}, "policies": {"http_web_server": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "vm": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}]}, "workflows": {"install": "define initialize_nodes\\n\\n    log message: \'Reloading policies\'\\n    event event: { \\"stage\\" => \\"Initializing monitoring policies\\" }\\n    reload_riemann_config app_id: \'${plan.name}\',\\n                          policies: \'$plan.policies\',\\n                          rules: \'$plan.rules\',\\n                          policies_events: \'$plan.policies_events\'\\n\\n    log message: \'processing nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${f:node}\'\\n        iterator on: \'$f:node.relationships\', to_v: \'relationship\'\\n            log message: \'waiting for node: ${node.id} relationship: ${v:relationship}\'\\n            state action: \'wait\', node_id: \'${v:relationship.target_id}\', reachable: \'true\'\\n        unset \'v:relationship\'\\n\\n        event event: { \\"stage\\" => \\"Create node\\" }\\n        log message: \'executing create workflow for node: ${node.id}\'\\n        set \'v:create\': \\"$f:node.workflows.create\\"\\n        create\\n        unset \'v:create\'\\n\\n        execute_relationships_workflow workflow: \'preconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Configure node\\" }\\n        log message: \'executing configure workflow for node: ${node.id}\'\\n        set \'v:configure\': \\"$f:node.workflows.configure\\"\\n        configure\\n        unset \'v:configure\'\\n\\n        execute_relationships_workflow workflow: \'postconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Start node\\" }\\n        log message: \'executing start workflow for node: ${node.id}\'\\n        set \'v:start\': \\"$f:node.workflows.start\\"\\n        start\\n        unset \'v:start\'\\n\\n        state node_id: \'${node.id}\', reachable: \'true\'\\n\\n        execute_relationships_workflow workflow: \'establish\'\\n", "uninstall": "define uninstalling_nodes\\n    log message: \'uninstalling nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${node.id}\'\\n        # wait for all dependents to be uninstalled first\\n        iterator on: \'$f:node.dependents\', to_v: \'dependent\'\\n            log message: \'waiting for node: ${node.id} dependent: ${v:dependent}\'\\n            state action: \'wait\', node_id: \'${v:dependent}\', reachable: \'false\'\\n        unset \'v:dependent\'\\n\\n        state action: \'get\', node_id: \'${node.id}\', to_f: \'node_reachable\'\\n        log message: \'node reachable state is: ${node_reachable}\'\\n        # we only call uninstall on reachable nodes\\n        sequence if: \'${node_reachable} == true\'\\n            event event: { \\"stage\\" => \\"Stop node\\" }\\n            log message: \'executing stop workflow for node: ${node.id}\'\\n            set \'v:stop\': \\"$f:node.workflows.stop\\"\\n            stop\\n            unset \'v:stop\'\\n\\n            execute_relationships_workflow workflow: \'unlink\'\\n\\n            event event: { \\"stage\\" => \\"Delete node\\" }\\n            log message: \'executing delete workflow for node: ${node.id}\'\\n            set \'v:delete\': \\"$f:node.workflows.delete\\"\\n            delete\\n            unset \'v:delete\'\\n\\n            state action: \'wait\', node_id: \'${node.id}\', reachable: \'false\'\\n\\n    #TODO when we support multi app deployment, remove relevant policies from riemann"}, "nodes": [{"operations": {}, "relationships": [{"source_operations": {}, "target_operations": {}, "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_id": "vm", "state": "reachable", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "type": "cloudify.relationships.contained_in"}], "declared_type": "cloudify.types.web_server", "name": "http_web_server", "workflows": {"start": "define node_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "properties": {"port": 8080, "cloudify_runtime": {}}, "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "plugins": {}, "host_id": "vm", "type": "cloudify.types.web_server", "id": "http_web_server"}, {"operations": {"cloudify.interfaces.worker_installer.start": {"operation": "tasks.start", "plugin": "worker_installer"}, "get": {"operation": "tasks.get", "plugin": "kv_store"}, "cloudify.interfaces.worker_installer.restart": {"operation": "tasks.restart", "plugin": "worker_installer"}, "cloudify.interfaces.kv_store.get": {"operation": "tasks.get", "plugin": "kv_store"}, "cloudify.interfaces.worker_installer.install": {"operation": "tasks.install", "plugin": "worker_installer"}, "put": {"operation": "tasks.put", "plugin": "kv_store"}, "cloudify.interfaces.plugin_installer.install": {"operation": "tasks.install", "plugin": "plugin_installer"}, "cloudify.interfaces.kv_store.put": {"operation": "tasks.put", "plugin": "kv_store"}, "start": {"operation": "tasks.start", "plugin": "worker_installer"}, "restart": {"operation": "tasks.restart", "plugin": "worker_installer"}}, "declared_type": "cloudify.types.host", "name": "vm", "plugins_to_install": [], "workflows": {"start": "define host_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n    sequence if: \'${node.properties.install_agent} == true\'\\n        state action: \'wait\', node_id: \'${node.id}\', reachable: \'true\'\\n        log message: \'installing agent on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.install\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.start\'\\n        event event: { \\"stage\\" => \\"Installing plugins\\" }\\n        log message: \'installing plugins on host: ${node.id} - plugins: ${node.plugins_to_install}\'\\n        iterator on: \'$node.plugins_to_install\', to_v: \'plugin\'\\n            log message: \'installing plugin: ${v:plugin.name} on host: ${node.id}\'\\n            execute_operation operation: \'cloudify.interfaces.plugin_installer.install\', params: {\\n                plugin: {\\n                    name: \'${v:plugin.name}\',\\n                    url: \'${v:plugin.url}\'\\n                 }\\n            }\\n            log message: \'successfully installed plugin: ${v:plugin.name} on host: ${node.id}\'\\n        log message: \'restarting worker on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.restart\'\\n        execute_operation operation: \'cloudify.interfaces.kv_store.put\', params: {\\n            key: \\"agent plugins installed\\",\\n            value: true\\n        }\\n\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "properties": {"install_agent": false, "cloudify_runtime": {}}, "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "plugins": {"plugin_installer": {"url": "cloudify/poc/plugins/celery-worker-plugin-installer.zip", "agent_plugin": "true", "name": "plugin_installer"}, "kv_store": {"url": "cloudify/poc/plugins/kv_store.zip", "agent_plugin": "true", "name": "kv_store"}, "worker_installer": {"url": "cloudify/poc/plugins/celery-worker-installer.zip", "agent_plugin": "false", "name": "worker_installer"}}, "host_id": "vm", "dependents": ["http_web_server"], "type": "cloudify.types.host", "id": "vm"}]}}' ]
[2014-02-11 15:51:25.234] [INFO] server - [ 'dispatching request ',
  { hostname: '15.185.216.244',
    port: '8100',
    path: '/blueprints/hello_world',
    method: 'GET' } ]
[2014-02-11 15:51:25.871] [INFO] console - STATUS: 200
[2014-02-11 15:51:26.803] [INFO] server - [ 'Request done, data: ',
  '{"updatedAt": "2014-02-11 13:42:30.070945", "id": "hello_world", "createdAt": "2014-02-11 13:42:30.070945", "plan": {"relationships": {"cloudify.relationships.depends_on": {"source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.depends_on", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}}, "cloudify.relationships.connected_to": {"source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.connected_to", "derived_from": "cloudify.relationships.depends_on", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}}, "cloudify.relationships.contained_in": {"source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "name": "cloudify.relationships.contained_in", "derived_from": "cloudify.relationships.depends_on", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}}}, "policies_events": {"start_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(tag \\"reachable\\" index)\\n", "message": "start detection passed"}, "performance_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"performance\\"\\n                                    :state \\"\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "performance monitoring"}, "failure_detection_policy": {"policy": "; $node_id will be injected with the current node id\\n; $event will be injected with a json form event\\n\\n(fn [evnt]\\n  (let [ip-event (assoc evnt :host \\"$node_id\\"\\n                             :service \\"ip\\"\\n                             :state (get evnt :host)\\n                             :description \\"$event\\"\\n                             :tags [\\"cosmo\\"])]\\n      (call-rescue ip-event [index]))\\n  (let [reachable-event (assoc evnt :host \\"$node_id\\"\\n                                    :service \\"reachable\\"\\n                                    :state \\"false\\"\\n                                    :description \\"$event\\"\\n                                    :tags [\\"cosmo\\"])]\\n      (call-rescue reachable-event [index])))\\n", "message": "detected failure"}}, "name": "hello_world", "rules": {"state_equals": {"message": "${service} state has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (state \\"${state}\\"))\\n    $node_policy_events)\\n"}, "metric_below": {"message": "metric ${service} has dropped below a threshold of ${metric}, with a value of #{metric.value}", "rule": "(by [:host :service]\\n  (changed\\n      (fn [e]\\n          (and\\n              (not (nil? (:metric e)))\\n              (< (:metric e) ${metric})\\n          )\\n      )\\n      {:init false}\\n      (where\\n          (and\\n              (service \\"${service}\\")\\n              (and\\n                  (not (nil? metric))\\n                  (< metric ${metric})\\n              )\\n          )\\n          $node_policy_events\\n      )\\n  )\\n)\\n"}, "state_not_equals": {"message": "${service} has changed to #{state.value}", "rule": "(where\\n    (and\\n        (service \\"${service}\\")\\n        (not (state \\"${state}\\")))\\n    $node_policy_events)\\n"}}, "policies": {"http_web_server": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "vm": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}]}, "workflows": {"install": "define initialize_nodes\\n\\n    log message: \'Reloading policies\'\\n    event event: { \\"stage\\" => \\"Initializing monitoring policies\\" }\\n    reload_riemann_config app_id: \'${plan.name}\',\\n                          policies: \'$plan.policies\',\\n                          rules: \'$plan.rules\',\\n                          policies_events: \'$plan.policies_events\'\\n\\n    log message: \'processing nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${f:node}\'\\n        iterator on: \'$f:node.relationships\', to_v: \'relationship\'\\n            log message: \'waiting for node: ${node.id} relationship: ${v:relationship}\'\\n            state action: \'wait\', node_id: \'${v:relationship.target_id}\', reachable: \'true\'\\n        unset \'v:relationship\'\\n\\n        event event: { \\"stage\\" => \\"Create node\\" }\\n        log message: \'executing create workflow for node: ${node.id}\'\\n        set \'v:create\': \\"$f:node.workflows.create\\"\\n        create\\n        unset \'v:create\'\\n\\n        execute_relationships_workflow workflow: \'preconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Configure node\\" }\\n        log message: \'executing configure workflow for node: ${node.id}\'\\n        set \'v:configure\': \\"$f:node.workflows.configure\\"\\n        configure\\n        unset \'v:configure\'\\n\\n        execute_relationships_workflow workflow: \'postconfigure\'\\n\\n        event event: { \\"stage\\" => \\"Start node\\" }\\n        log message: \'executing start workflow for node: ${node.id}\'\\n        set \'v:start\': \\"$f:node.workflows.start\\"\\n        start\\n        unset \'v:start\'\\n\\n        state node_id: \'${node.id}\', reachable: \'true\'\\n\\n        execute_relationships_workflow workflow: \'establish\'\\n", "uninstall": "define uninstalling_nodes\\n    log message: \'uninstalling nodes: ${plan.nodes}\'\\n    concurrent_iterator on: \'$plan.nodes\', to_f: \'node\', merge_type: \'ignore\'\\n        log message: \'processing node: ${node.id}\'\\n        # wait for all dependents to be uninstalled first\\n        iterator on: \'$f:node.dependents\', to_v: \'dependent\'\\n            log message: \'waiting for node: ${node.id} dependent: ${v:dependent}\'\\n            state action: \'wait\', node_id: \'${v:dependent}\', reachable: \'false\'\\n        unset \'v:dependent\'\\n\\n        state action: \'get\', node_id: \'${node.id}\', to_f: \'node_reachable\'\\n        log message: \'node reachable state is: ${node_reachable}\'\\n        # we only call uninstall on reachable nodes\\n        sequence if: \'${node_reachable} == true\'\\n            event event: { \\"stage\\" => \\"Stop node\\" }\\n            log message: \'executing stop workflow for node: ${node.id}\'\\n            set \'v:stop\': \\"$f:node.workflows.stop\\"\\n            stop\\n            unset \'v:stop\'\\n\\n            execute_relationships_workflow workflow: \'unlink\'\\n\\n            event event: { \\"stage\\" => \\"Delete node\\" }\\n            log message: \'executing delete workflow for node: ${node.id}\'\\n            set \'v:delete\': \\"$f:node.workflows.delete\\"\\n            delete\\n            unset \'v:delete\'\\n\\n            state action: \'wait\', node_id: \'${node.id}\', reachable: \'false\'\\n\\n    #TODO when we support multi app deployment, remove relevant policies from riemann"}, "nodes": [{"operations": {}, "relationships": [{"source_operations": {}, "target_operations": {}, "source_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_interfaces": {"cloudify.interfaces.relationship_lifecycle": ["preconfigure", "postconfigure", "establish", "unlink"]}, "target_id": "vm", "state": "reachable", "workflows": {"preconfigure": "define depends_on_preconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.preconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "postconfigure": "define depends_on_postconfigure\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.postconfigure\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "establish": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.establish\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n", "unlink": "define depends_on_establish\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'source\'\\n    execute_operation operation: \'cloudify.interfaces.relationship_lifecycle.unlink\',\\n                      relationship: \'$v:relationship\',\\n                      run_on_node: \'target\'\\n"}, "type": "cloudify.relationships.contained_in"}], "declared_type": "cloudify.types.web_server", "name": "http_web_server", "workflows": {"start": "define node_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "properties": {"port": 8080, "cloudify_runtime": {}}, "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "plugins": {}, "host_id": "vm", "type": "cloudify.types.web_server", "id": "http_web_server"}, {"operations": {"cloudify.interfaces.worker_installer.start": {"operation": "tasks.start", "plugin": "worker_installer"}, "get": {"operation": "tasks.get", "plugin": "kv_store"}, "cloudify.interfaces.worker_installer.restart": {"operation": "tasks.restart", "plugin": "worker_installer"}, "cloudify.interfaces.kv_store.get": {"operation": "tasks.get", "plugin": "kv_store"}, "cloudify.interfaces.worker_installer.install": {"operation": "tasks.install", "plugin": "worker_installer"}, "put": {"operation": "tasks.put", "plugin": "kv_store"}, "cloudify.interfaces.plugin_installer.install": {"operation": "tasks.install", "plugin": "plugin_installer"}, "cloudify.interfaces.kv_store.put": {"operation": "tasks.put", "plugin": "kv_store"}, "start": {"operation": "tasks.start", "plugin": "worker_installer"}, "restart": {"operation": "tasks.restart", "plugin": "worker_installer"}}, "declared_type": "cloudify.types.host", "name": "vm", "plugins_to_install": [], "workflows": {"start": "define host_start\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.start\'\\n    sequence if: \'${node.properties.install_agent} == true\'\\n        state action: \'wait\', node_id: \'${node.id}\', reachable: \'true\'\\n        log message: \'installing agent on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.install\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.start\'\\n        event event: { \\"stage\\" => \\"Installing plugins\\" }\\n        log message: \'installing plugins on host: ${node.id} - plugins: ${node.plugins_to_install}\'\\n        iterator on: \'$node.plugins_to_install\', to_v: \'plugin\'\\n            log message: \'installing plugin: ${v:plugin.name} on host: ${node.id}\'\\n            execute_operation operation: \'cloudify.interfaces.plugin_installer.install\', params: {\\n                plugin: {\\n                    name: \'${v:plugin.name}\',\\n                    url: \'${v:plugin.url}\'\\n                 }\\n            }\\n            log message: \'successfully installed plugin: ${v:plugin.name} on host: ${node.id}\'\\n        log message: \'restarting worker on host: ${node.id}\'\\n        execute_operation operation: \'cloudify.interfaces.worker_installer.restart\'\\n        execute_operation operation: \'cloudify.interfaces.kv_store.put\', params: {\\n            key: \\"agent plugins installed\\",\\n            value: true\\n        }\\n\\n", "create": "define node_create\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.create\'\\n", "stop": "define node_stop\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.stop\'", "configure": "define node_configure\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.configure\'", "delete": "define node_delete\\n    execute_operation operation: \'cloudify.interfaces.lifecycle.delete\'"}, "properties": {"install_agent": false, "cloudify_runtime": {}}, "instances": {"deploy": 1}, "policies": [{"rules": [{"type": "state_equals", "properties": {"state": "running"}}], "name": "start_detection_policy"}], "plugins": {"plugin_installer": {"url": "cloudify/poc/plugins/celery-worker-plugin-installer.zip", "agent_plugin": "true", "name": "plugin_installer"}, "kv_store": {"url": "cloudify/poc/plugins/kv_store.zip", "agent_plugin": "true", "name": "kv_store"}, "worker_installer": {"url": "cloudify/poc/plugins/celery-worker-installer.zip", "agent_plugin": "false", "name": "worker_installer"}}, "host_id": "vm", "dependents": ["http_web_server"], "type": "cloudify.types.host", "id": "vm"}]}}' ]
>>>>>>> 8a284adc8b35a88dc8f456b13062da296b38d197
